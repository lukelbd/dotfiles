#!/bin/bash
# shellcheck disable=2076
#-----------------------------------------------------------------------------#
# Create symlinks from $HOME to the committed files in $HOME/dotfiles
#-----------------------------------------------------------------------------#
# Read the tracked file names. Note style configs required to be in .config.
# See: https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html
# Note '.ignore' seems to work in either $HOME or in $HOME/.config after testing.
shopt -s nullglob
configs=(pep8 black isort)  # required
exclude=(.gitignore backup cleanup setup envs environment.yml)
dotfiles=$HOME/dotfiles  # dotfiles directory
cd "$dotfiles" || {
  echo "Error: dotfiles repo should be cloned into \$HOME."
  exit 1
}
read -r -a names < <(git ls-tree --name-only master | xargs)

# Create required folders
# NOTE: If 'undodir' in vim is set to non-existent folder failure is silent
backup=$dotfiles/backup
undohist=$HOME/.vim_undo_hist  # required for persistent undo
nvimroot=$HOME/.config/nvim
[ -d "$backup" ] || mkdir "$backup"
[ -d "$nvimroot" ] || mkdir "$nvimroot"
[ -d "$undohist" ] || mkdir "$undohist"

# Create symlinks
# NOTE: Moves existing stuff to backup storage
for name in "${names[@]}"; do  # iterate through files
  [[ " ${exclude[*]} " =~ " $name " ]] && continue
  [[ "$name" =~ \.(md|txt|rst)$ ]] && continue
  file=$dotfiles/$name
  [[ .gitignore.default == "$name"  ]] && name=.gitignore
  [[ " ${configs[*]} " =~ " $name " ]] && name=.config/$name
  dest=$HOME/$name
  echo "Creating symlink to '${file##*/}' in '$HOME'..."
  if [ -L "$dest" ]; then
    echo "Removing existing symlink..."
    rm "$dest"  # remove if symlink
  elif [ -r "$dest" ]; then
    echo "Moving existing file '${file##*/}' to '$backup'..."
    bakdest=$backup/$name
    if [ -e "$bakdest" ]; then
      echo "Warning: Removing existing backup..."
      rm -r "$bakdest"
    fi
    mv "$dest" "$backup/"  # copy if not
  fi
  ln -s "$file" "$dest"
done

# Create variety of symlinks in home directory
# NOTE: Using brew install --cask mactex generates /Library/TeX/Root symlink pointing
# to /Library/TeX/Distributions/.DefaultTeX/Contents/Root pointing to a distribution
# e.g. /usr/local/texlive/2021. Use the symlink for consistency across versions. For
# python have to manually search for the latest version using reverse number sort.
texroot=/Library/TeX/Root  # tex distribution
libroot=$HOME/Library  # library source
pdfroot=$libroot/Mobile\ Documents/3L68KQB4HG~com~readdle~CommonDocuments
itermroot=$libroot/Application\ Support/iTerm2
cloudroot=$libroot/Mobile\ Documents/com~apple~CloudDocs
googleroot=$libroot/CloudStorage/GoogleDrive-lukelbd@gmail.com
[ -d "$HOME"/micromamba ] && condaroot=$HOME/micromamba || condaroot=$HOME/mambaforge
pyroot=$condaroot/lib/python3.  # python root
read -r -a pynums < <(echo $pyroot* | sed "s@$pyroot@@g" | tr ' ' '\n' | sort -gr)
pyroot=$pyroot${pynums[0]:?10}  # below emits error if empty
for pair in \
  "$HOME"/.vim:.nvim \
  "$HOME"/dotfiles/.vimrc:.config/nvim/init.vim \
  "$pyroot"/site-packages:site-packages \
  "$texroot"/texmf-dist/tex:texmf-dist \
  "$itermroot"/Scripts:scripts \
  "$libroot"/Services:workflows \
  "$pdfroot"/Documents:pdfs \
  "$googleroot"/My\ Drive:google \
  "$cloudroot":icloud \
  "$cloudroot"/Mackup:mackup \
  "$cloudroot"/Mackup/.mackup.cfg:.mackup.cfg
  do
  src=${pair%:*}
  if ! [ -r "$src" ]; then
    echo "Warning: Skipping link to '$src' (path does not exist)."
    continue
  fi
  dest=$HOME/${pair#*:}
  echo "Creating symlink to '$src' at '$dest'..."
  if [ -L "$dest" ]; then
    echo "Removing existing symlink..."
    rm "$dest"  # remove if symlink
  elif [ -r "$dest" ]; then
    echo "Warning: Skipping link to '$src' (non-symlink exists)"
    continue
  fi
  ln -sf "$src" "$dest"
done
