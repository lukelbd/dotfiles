#!/bin/bash
# shellcheck disable=2076
################################################################################
# setup
# Create symlinks from $HOME to the committed files in $HOME/dotfiles
################################################################################
# Files to be ignored
shopt -s nullglob
exclude=(README.md REGEXES.md .gitignore envs backup cleanup setup)

# Read the tracked file names
dotfiles=$HOME/dotfiles  # dotfiles directory
cd "$dotfiles" || {
  echo "Error: dotfiles repo should be cloned into \$HOME."
  exit 1
}
read -r -a names < <(git ls-tree --name-only master | xargs)
backup=$dotfiles/backup
[ -d "$backup" ] || mkdir "$backup"

# Move existing stuff to storage, then create symlinks
for name in "${names[@]}"; do  # iterate through files
  [[ " ${exclude[*]} " =~ " $name " ]] && continue
  file=$dotfiles/$name
  [ "$name" == .gitignore.default ] && name=.gitignore  # change destination name?
  dest=$HOME/$name
  bakdest=$backup/$name
  echo "Creating symlink to '${file##*/}' in '$HOME'..."
  if [ -L "$dest" ]; then
    echo "Removing existing symlink..."
    rm "$dest"  # remove if symlink
  elif [ -r "$dest" ]; then
    echo "Moving existing file '${file##*/}' to '$backup'..."
    if [ -e "$bakdest" ]; then
      echo "Warning: Removing existing backup..."
      rm -r "$bakdest"
    fi
    mv "$dest" "$backup/"  # copy if not
  fi
  ln -s "$file" "$dest"
done

# Create variety of symlinks in home directory
# NOTE: Using brew install --cask mactex generates /Library/TeX/Root symlink pointing
# to /Library/TeX/Distributions/.DefaultTeX/Contents/Root pointing to a distribution
# year e.g. /usr/local/texlive/2021. Use the symlink for consistency across versions.
# For python have to manually search for the latest version using reverse number sort.
libroot=$HOME/Library  # library source
texroot=/Library/TeX/Root  # tex distribution
nvimroot=$HOME/.config/nvim
[ -d "$nvimroot" ] || mkdir "$nvimroot"
if [ -d "$HOME/mambaforge" ]; then
  condaroot=$HOME/mambaforge
elif [ -d "$HOME/miniforge" ]; then
  condaroot=$HOME/miniforge
else  # possibly also missing
  condaroot=$HOME/miniconda3
fi
pyroot=$condaroot/lib/python3.  # python root
read -r -a pynums < <(echo $pyroot* | sed "s@$pyroot@@g" | tr ' ' '\n' | sort -gr)
pyroot=$pyroot${pynums[0]:?10}  # below emits error if empty
for pair in \
  $HOME/.vim:.nvim \
  $HOME/dotfiles/.vimrc:.config/nvim/init.vim \
  $pyroot/site-packages:site-packages \
  $texroot/texmf-dist/tex:tex-packages \
  $libroot/Mobile\ Documents/com~apple~CloudDocs/Mackup:mackup \
  $libroot/Mobile\ Documents/com~apple~CloudDocs:iCloud\ Drive \
  $libroot/Mobile\ Documents/3L68KQB4HG~com~readdle~CommonDocuments/Documents/:iCloud\ PDFs \
  $libroot/CloudStorage/GoogleDrive-lukelbd@gmail.com/My\ Drive:Google\ Drive \
  $libroot/Services:workflows
  do
  src=${pair%:*}
  if ! [ -r "$src" ]; then
    echo "Warning: Skipping link to '$src' (path does not exist)."
    continue
  fi
  dest=$HOME/${pair#*:}
  echo "Creating symlink to '$src' at '$dest'..."
  if [ -L "$dest" ]; then
    echo "Removing existing symlink..."
    rm "$dest"  # remove if symlink
  elif [ -r "$dest" ]; then
    echo "Warning: Skipping link to '$src' (non-symlink exists)"
    continue
  fi
  ln -sf "$src" "$dest"
done
