#!/usr/bin/env bash
# shellcheck disable=2001,2002,2018,2019
usage1="ydm [OPTION...] URL ARTIST - TITLE"
usage2="ydm [OPTION...] URL ARTIST / TITLE"
doc="
Usage

  $usage1
  $usage2

Description

  This script downloads, normalizes, and tags audio from arbitrary youtube
  videos. Audio is downloaded from the URL into the native format with the
  highest bitrate -- usually an OOG (webm) file. Then the file is fed
  into ydm-normalize and ydm-metadata for volume normalization and tagging.

Required arguments

  URL     The youtube URL. Must begin with 'http'.
  ARTIST  The artist name. Should be separated from TITLE with a dash surrounded
          by spaces or with a slash *optionally* surrounded by spaces.
  TITLE   The song name. The file will be saved with m4a or mp3 format
          depending on whether the '--mp3' flag was passed.

Optional arguments

  -h|--help            Print this message.
  -4|--m4a             Save as M4A. This is the default.
  -3|--mp3             Save as MP3 instead of M4A.
  -q|--quick           Skip the tagging step.
  -Q|--very-quick      Skip the volume normalization and tagging steps.
  -s=N|--start-time=N  The start time in seconds, MM:SS, or HH:MM:SS.
  -e=N|--end-time=N    The end time in seconds, MM:SS, or HH:MM:SS.
  -*                   Remaining flags passed to ydm-metadata.
"
# Helper functions
# NOTE: Could also use afinfo for this part
# let bits=$(afinfo "$path_dl" | grep 'bit rate' | tr -dc '[0-9]')/1000
raise() {
  echo "$usage1"
  echo "$usage2"
  echo "Error: $*"
  exit 1
}
cleanup() {  # remove incomplete products
  shopt -s nullglob
  [ -n "$path_dl" ] && rm "${path_dl%.*}".* 2>/dev/null
  [ -n "$path_normalized" ] && rm "$path_normalized" 2>/dev/null
  [ -n "$path_tagged" ] && rm "$path_tagged" 2>/dev/null
}
trap cleanup EXIT  # remove files on exit or interruption!

# Parse input
ext=m4a
quick=0  # 1 means skip metadata, 2 means skip normalization
directory=$HOME/Music  # download directory
[ -d "$directory" ] || raise "Output directory \"$directory\" does not exist or is not a directory."
while [ $# -gt 0 ]; do
  case "$1" in
    -h|--help)               echo "$doc" && exit 0 ;;
    -3|--mp3)                ext=mp3               ;;
    -4|--m4a)                ext=m4a               ;;
    -q|--quick)              quick=1               ;;
    -Q|--very-quick)         quick=2               ;;
    -[se]=*|--start*|--end*) normflags+="$1 "      ;;
    -[-a-zA-Z0-9]*)          metaflags+="$1 "      ;;
    *)
      if [ -z "$url" ]; then
        url="$1"  # the URL
      else
        name+=" $1"  # the filename
      fi
      ;;
  esac
  shift 1
done
name=$(echo "$name" | awk '{$1=$1};1')  # trim whitespace: https://unix.stackexchange.com/questions/102008/how-do-i-trim-leading-and-trailing-whitespace-from-each-line-of-some-output
[ -n "$url" ] || raise "Must supply URL."
echo "URL: $url"
[ -n "$name" ] || raise "Must supply artist and title."
echo "Name: '$name'"

# Create artist directory if necessary
if [[ "$name" =~ '/' ]]; then
  num=$(echo "$name" | tr -cd '/' | wc -c)
  [ "$num" -eq 1 ] || \
    raise "Path name '$name' must have only one forward slash. Found $num slashes."
  name=$(echo "$name" | sed 's: */ *:/:g')
  artist=${name%/*}
  [ -d "$directory/$artist" ] \
    || mkdir "$directory/$artist" \
    || raise "Failed to make directory '$directory/$artist'."
elif ! [[ "$name" =~ ' - ' ]]; then
  echo "Warning: To add metadata file must be in format 'ARTIST - TITLE' or 'ARTIST/TITLE'."
fi

# Paths
path_template="$directory/$name-download.%(ext)s"  # see youtube-dl help info; just picks whatever extension
path_normalized="$directory/$name-normalized.$ext"
path_tagged="$directory/$name-tagged.$ext"
path_final="$directory/$name.$ext"

# Download with youtube-dl
# TODO: Support downloading entire playlists or albums
# NOTE: No playlist, in case user provides playlist URL
# NOTE: Previously used youtube-dl --get-filename but this causes irritating
# delay. Easier to just query results with a glob pattern.
echo "Downloading."
youtube-dl -q -f bestaudio --no-playlist "$url" -o "$path_template"
paths_dl=("${path_template%.*}".*)
[ ${#paths_dl[@]} -eq 0 ] && raise "Download failed."
[ ${#paths_dl[@]} -gt 1 ] && raise "Ambiguous download results: ${paths_dl[*]}"
path_dl=${paths_dl[0]}

# Normalize audio
if [ $quick -ge 2 ]; then
  mv "$path_dl" "$path_final"
  exit 0
fi
echo "Normalizing."
ydm-normalize $normflags "$path_dl" "$path_normalized" \
  || raise "Audio normalization failed."

# Add metadata with tagging function
if [ $quick -ge 1 ]; then
  mv "$path_normalized" "$path_final"
  exit 0
fi
echo "Adding metadata."
cp "$path_normalized" "$path_tagged"
ydm-metadata $metaflags --url "$url" "$path_tagged" \
  || raise "Metadata script failed."

# Cleanup
mv "$path_tagged" "$path_final"
exit 0
