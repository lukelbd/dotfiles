#!/usr/bin/env bash
#-----------------------------------------------------------------------------#
# Sync a local directory with files on SD card
# This function will only modify files on the SD card, never the local
# directory. Beware problem that files are 'modified' when transferred to
# SD card, so cannot check dates on them.
#-----------------------------------------------------------------------------#
shopt -u nullglob
shopt -s globstar
raise() {
  echo "Error: $*"
  exit 1
}
cp='gcp --preserve=mode,timestamps' # simpler and faster than rsync
mb_folder="$HOME/iCloud Drive/music"
sd_folder="$HOME/Phone/Music"  # new phone
sd_log="$mb_folder/sd.log"
sync_modified=true  # include files?
! [ -r "$sd_log" ] && confirm "Log file sd.log not found! Cancel psync?" && exit 1
[ -d "$mb_folder" ] || raise "Laptop music location $mb_folder not found."
[ -d "$sd_folder" ] || raise "Phone music location $sd_folder not found."
echo "SD playlist: $sd_folder"
echo "MB playlist: $mb_folder"
touch "$sd_log"  # if doesn't exist, make

# Alphabetize m3u8 files, repair line endings, and remove absolute paths
# See: https://unix.stackexchange.com/a/32059/112647
for path in "$mb_folder"/**/*.m3u*; do
  echo "Repairing ${path##*/}"
  python - <<EOF
with open('$path', 'r') as f:
    lines = f.readlines()
lines = sorted(
  (line.strip().replace('$path/', '') for line in lines if line[0] != '#'),
  key=str.casefold
)
with open('$path', 'w') as f:
    f.write('\n'.join(lines))
EOF
done

# Iterate through local files
copied=false  # copied anything?
updated=false  # updated anything?
for path in "$mb_folder"/**/*.{m3u,m3u8,mp3,m4a}; do
  # Copy new files downloaded
  [ -r "$path" ] || continue  # e.g. if glob failed
  file=${path##*/}
  dir=${path%/*}
  dir=${dir/${mb_folder}/${sd_folder}}
  [ "$dir" == "$sd_folder" ] || [ -d "$dir" ] || mkdir "$dir" \
    || raise "Failed to create subdirectory '$dir'."

  # Create new file
  if ! [ -r "$dir/$file" ]; then
    copied=true # record
    echo "New local file '${dir##*/}/${file}'. Copying to SD..."
    $cp "$path" "$dir/$file" || raise "Copy failed."

  # Replace old file of same name with modified one
  elif $sync_modified; then
    date_c=$(tail -n 1 "$sd_log")  # date copied to SD
    date_m=$(date -r "$path" +%s)  # date last modified
    if [ -z "$date_c" ]; then  # initializing directory
      if [ $date_m -gt $(($(date +%s) - (50 * 3600 * 24))) ]; then  # update stuff changed within 50 days
        modified=true
      else
        modified=false
      fi
    elif [ "$date_m" -gt "$date_c" ]; then
      modified=true # modified since last copied
    else
      modified=false # not modified since last copied
    fi
    if $modified; then
      echo "Modified local file '${dir##*/}/${file}' since previous sync."
      updated=true
      $cp "$path" "$dir/$file" || raise "Copy failed."
    fi
  fi
done
$copied || echo "No new files found."
$updated || echo "No recently modified files found."

# Iterate through remote files
deleted=false  # deleted anything?
for path in "$sd_folder"/**/*.{m3u,m3u8,mp3,m4a}; do
  # Delete old file
  [ -r "$path" ] || continue
  file="${path##*/}"
  dir=${path%/*}
  dir=${dir/${sd_folder}/${mb_folder}}
  if ! [ -r "$dir/$file" ]; then
    deleted=true
    echo "Deleted local file '${dir##*/}/${file}'. Deleting from SD..."
    rm "$path"
  fi
done
$deleted || echo "No old files deleted."

# Record in Playlist when last sync occurred
date +%s >> "$sd_log"
