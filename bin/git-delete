#!/usr/bin/env bash
# set -o errexit
#------------------------------------------------------------------------------#
# Author: David Underhill
# Script to permanently delete files/folders from your git repository. To use
# it, cd to your repository's root and then run the script with a list of paths
# you want to delete, e.g., git-delete path1 path2, or with glob patterns
#------------------------------------------------------------------------------#
# Original script:
# set -o errexit
# [ $# -eq 0 ] && exit 0
# cd $(git rev-parse --show-toplevel)
# git filter-branch --index-filter "git rm -rf --cached --ignore-unmatch $@" HEAD
# rm -rf .git/refs/original/ && git reflog expire --all && git gc --aggressive --prune
#------------------------------------------------------------------------------#
# Prune empty commits:
# https://stackoverflow.com/a/5985276/4970632
# More info:
# https://stackoverflow.com/a/18197405/4970632
# https://development.robinwinslow.uk/2013/06/11/dont-ever-commit-binary-files-to-git/
# which reference github file on: https://gist.githubusercontent.com/nottrobin/5758221/raw/ff740b4ac3b8ab80d40e3598ec461400dce42b5d/git-prune
# Two more detailed guides:
# http://stevelorek.com/how-to-shrink-a-git-repository.html
# https://blog.ostermiller.org/git-remove-from-history
# Purpose of tag-name-filter:
# https://stackoverflow.com/q/21009947/4970632
#------------------------------------------------------------------------------#
# Checks
if [ $# -ne 1 ]; then
  echo "Error: Need exactly 1 argument (file or glob pattern)."
  exit 1
fi

# Test if unstaged changes
root="$(git rev-parse --show-toplevel)"
stat="$(git status --porcelain)"
if [ -n "$stat" ]; then
  echo "Error: Unstaged changes detected." && exit 1
fi

# Preserve current ones (mv is super fast, so while this is ugly, no big deal)
pattern="$@" # the glob pattern
echo "Adding to gitignore: $pattern"
nlines=$(wc -l < "$root/.gitignore")
printf "\n# Filter-branch files\n" >>"$root/.gitignore"
git rm -r --cached "$pattern"
echo "$pattern" >>"$root/.gitignore"
git add --all && git commit -q -m "Stop tracking files before filter-branch"

# Remove all paths passed as arguments from the history of the repo
# NOTE: Make sure to remove from *all* branches using -- --all instead of HEAD
echo "Filtering branch."
git filter-branch -f --prune-empty --index-filter "git rm -rf --cached --ignore-unmatch -- $pattern" -- --all
# git filter-branch -f --prune-empty --tag-name-filter cat --index-filter "git rm -rf --cached --ignore-unmatch -- $pattern" -- --all

# Remove the temporary history git-filter-branch otherwise leaves behind for a long time
echo "Deleting refs and logs."
rm -rf "$root/.git/refs/original/"
git reflog expire --verbose --expire=now --all
# Not sure what this does, from that first link (not original script)
# git for-each-ref --format="%(refname)" refs/original/ | xargs -n 1 git update-ref -d

echo "Running git gc."
git gc --prune=now
git gc --aggressive --prune=now
[ $? -ne 0 ] && echo "Error" && exit 1

# Move matches back
echo "Fixing gitignore"
hash gsed 2>/dev/null && sub=gsed || sub=sed
$sub -i "$(($nlines+1)),\$d" "$root/.gitignore"

# Suggested next steps
# NOTE: Safe to make this manual!
# git push origin --force --all
