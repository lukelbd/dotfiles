#!/usr/bin/env python
"""
Change the color of the highlight annotations in PDF document(s).
The destination color is hardcoded in this script.
"""
# Adapted from:
# https://gist.github.com/jgosmann/9397570
# https://unix.stackexchange.com/a/118492/112647
# PDF format reference:
# http://wwwimages.adobe.com/www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf
# pages 12 to 13 define the character sets
import pathlib
import re

# Color specification
# WARNING: No decimal after first number critical to increase chances
# that replacement color size does not exceed size of original file.
PREFIX = b'/C ['
SUFFIX = b']'
COLOR = b'1 0.969 0.416'  # match PDF Expert highlight color on iPad
# COLOR b'254 245 142'  # this is what color dropper should show

# Component regular expressions
_to_char_group = lambda chars: f'[{re.escape(chars)}]'
FLOAT = r'(?=\+|\-)?\d+(\.\d*)?'
SPACE = '\x00\x09\x0A\x0C\x0D\x20'
DELIM = '()<>[]{}/%'
OTHER = f'[{re.escape(SPACE)}{re.escape(DELIM)}]'
SPACE = f'[{re.escape(SPACE)}]'

# Regular expressions
REGEX_OBJ = re.compile(
    fr'(?<={OTHER})obj{SPACE}*<<.*?>>{SPACE}*endobj(?={OTHER})'.encode(), re.DOTALL
)
REGEX_ANNOT = re.compile(
    f'/Type{SPACE}*/Annot(?={OTHER})'.encode()
)
REGEX_HIGH = re.compile(
    f'/Subtype{SPACE}*/Highlight(?={OTHER})'.encode()
)
REGEX_COLOR = re.compile(
    fr'/C{SPACE}*\[{SPACE}*({FLOAT}){SPACE}+({FLOAT}){SPACE}+({FLOAT}){SPACE}*\]'.encode()  # noqa: E501
)


def process_color(m):
    """
    Replace colors in the input string.
    """
    diff = len(m.group(0)) - len(COLOR) - len(PREFIX) - len(SUFFIX)
    if diff < 0:
        raise NotImplementedError(
            f'Replacement is {-diff} characters longer than original text and would '
            'require the size of the PDF file to change. This is not implemented.'
        )
    result = PREFIX + diff * b' ' + COLOR + SUFFIX
    return result


def process_obj(m):
    """
    Replace colors in the input text.
    """
    text = orig = m.group()
    is_annot = REGEX_ANNOT.search(text)
    is_highlight = REGEX_HIGH.search(text)
    if is_annot and is_highlight:
        text = REGEX_COLOR.sub(process_color, text)
        colors = [REGEX_COLOR.search(text).group() for text in (orig, text)]
        print(f'Replaced color {colors[0]} with {colors[1]}.')
    return text


def process_file(path, dryrun=False, overwrite=False):
    """
    Replace colors in the input file and overwrite or create new file.
    """
    # Skip file
    name = path.name[:10] + '...'
    suffix = '_recolored'
    if path.suffix != '.pdf':
        print(f'File {name!r} is not a PDF.')
        return
    if suffix in path.name:
        print(f'File {name!r} was already fixed.')
        return
    # Repair data
    with open(path, 'rb') as f:
        old = f.read()
    try:
        new, count = REGEX_OBJ.subn(process_obj, old)
    except NotImplementedError as error:
        print(f'File {name!r} replacement failed: {error}')
        return
    # Save results
    if count == 0:
        print(f'File {name!r} does not have highlighting.')
    elif dryrun:
        print(f'File {name!r} has highlighting.')
    else:
        if not overwrite:
            path = path.parent / (path.stem + suffix + '.pdf')
        print(f'Saving corrected highlighting to {path.name!r}.')
        with open(path, 'wb') as f:
            f.write(new)


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description=__doc__, add_help=False)
    parser.add_argument(
        '-h',
        '--help',
        action='help',
        help='Show this help message and exit.'
    )
    parser.add_argument(
        '-d',
        '--dryrun',
        action='store_true',
        help='Print file names without editing them.'
    )
    parser.add_argument(
        '-o',
        '--overwrite',
        action='store_true',
        help=(
            'Overwrite the files instead of creating new ones with the suffix '
            "'_recolored.pdf'. Default behavior is the latter."
        )
    )
    parser.add_argument(
        'paths',
        nargs='*',
        type=str,
        help='PDF file(s) to process.'
    )
    args = parser.parse_args()

    for path in args.paths:
        path = pathlib.Path(path)
        process_file(path, dryrun=args.dryrun, overwrite=args.overwrite)
