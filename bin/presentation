#! /usr/bin/env python
# -*- coding: utf-8 -*-


"""
A PDF presentation tool for Mac OS X

Copyright (c) 2011--2017, IIHM/LIG - Renaud Blanch <http://iihm.imag.fr/blanch/>
Licence: GPLv3 or higher <http://www.gnu.org/licenses/gpl.html>
"""


# imports ####################################################################

import sys
import os
import time
import select
import getopt
import textwrap
import mimetypes

from math import exp, hypot
from collections import defaultdict

if sys.version_info[0] == 3:
	sys.stdin  = sys.stdin.detach()  # so that sys.stdin.readline returns bytes
	sys.stdout = sys.stdout.detach() # so that sys.stdout.write accepts bytes


# constants and helpers ######################################################

NAME = "Présentation"
MAJOR, MINOR = 1, 7
VERSION = "%s.%s" % (MAJOR, MINOR)
HOME = "http://iihm.imag.fr/blanch/software/osx-presentation/"
COPYRIGHT = "Copyright © 2011-2017 Renaud Blanch"
CREDITS = """
Home: <a href='%s'>osx-presentation</a> <br/>
Source: <a href='https://bitbucket.org/rndblnch/osx-presentation/src/tip/presentation.py'>presentation.py</a> <br/>
Licence: <a href='http://www.gnu.org/licenses/gpl-3.0.txt'>GPLv3</a>+ <br/>
Icon courtesy of <a href="http://www.dlanham.com/">David Lanham</a>
""" % HOME

ICON = b''
CURSOR = b'iVBORw0KGgoAAAANSUhEUgAAABEAAAAXCAQAAABHPWxsAAACU0lEQVR4nGJgIAgAAAAA//9iZGBgYGBgYWBi+M/wh+E/NiUAAAAA//9iYmBgYGLg/P/zkg8DJwMLNiUAAAAA//9iYGBg4GCQ/f/////lngw8DEyY0gAAAAD//2JgYGDgYtD4/1/u//+/qzwYeDBNAgAAAP//YmBgYOBh0Pv/n+G/3P///1Z7YioCAAAA//9iYGBk4GLQ//+fAaoI0zoAAAAA//+CmAJVgqKIESYNAAAA//+CuAWuBEkR3DoAAAAA//9CMwWmaIUnAxfMOgAAAAD//8KiBKJolQfMOgAAAAD//8KqhOG/3P//f9d6MHAyMDIwAAAAAP//grnlH8N/hv+y/yAmwCCDCAMrAwMAAAD//2KBRgIDA4Mcw7ILUYaPGCofSh3LO8zwiuEpAxMDIwMjAAAA//+CWfRP7v//fxOXl9+DmMPgxqDPIMvAy8DEwAAAAAD//4KF7r///xjSGRL//5P7z/C/5vreBgYJBi6IxwEAAAD//2JiYGD4y/CLgYExjOEWw4Nl06LvMDAs0lAxY2Bk+MPwh4GBgQEAAAD//2JkYGDgYBBhEGX4w/CRgYVB5f8OecZHDP//MyoxvGD4wcDAwAAAAAD//2JiYGT4w/CB4QnDY4bXDO8ZXiyb/PD//3/r+hARAAAAAP//gqU6Roa/DAwMrAzCDPIMkgz/GV4w3GN4z/CLgYGBAQAAAP//Qo4sRgZGBnYGfgYeBgaGLwwfGX5AEioAAAD//0KJTwYGBkYGVgYmBgaGfwy/GRggSgAAAAD//yICAQAAAP//AwA767hFBlibHgAAAABJRU5ErkJggg=='
X_hot, Y_hot = 4, 18

PRESENTER_FRAME   = ((100., 100.), (1024., 768.))
FEED_HEIGHT = 40
MINIATURE_WIDTH, MINIATURE_MARGIN = 120, 5
MIN_POSTER_HEIGHT = 20.

CR, ESC, DEL = (chr(k) for k in [13, 27, 127])

HELP = [
	("?",         "show/hide this help"),
	("h",         "hide"),
	("q",         "quit"),
	("r",         "relaunch"),
	(".|b",       "toggle black view"),
	("w",         "toggle web view"),
	("m",         "toggle movie view"),
	("s",         "show slide view"),
	("f/F5/⎋",    "toggle/enter/leave fullscreen"),
	("x",         "switch screens"),
	("←|↑|⇞",     "previous page"),
	("→|↓|⇟",     "next page"),
	("⌘←/→",      "back/forward"),
	("⌘↑/↓",      "previous/next frame"),
	("⌘⇞/⇟",      "previous/next section"),
	("↖/↘",       "first/last page"),
	("t|space",   "start or stop timer"),
	("z",         "set origin for timer"),
	("[/]",       "sub/add  1 minute to planned time"),
	("{/}",       "sub/add 10 minutes"),
	("+/-/0",     "zoom in/out/reset speaker notes or web view"),
	("space",     "play/pause video (while in movie mode)"),
	("&lt;/&gt;", "step video backward/forward"),
	("e",         "erase on-screen annotations"),
]

def nop(): pass


# handling args ##############################################################

name, args = sys.argv[0], sys.argv[1:]

# ignore "-psn" arg if we have been launched by the finder
launched_from_finder = args and args[0].startswith("-psn")
if launched_from_finder:
	args = args[1:]


def exit_usage(message=None, code=0):
	usage = textwrap.dedent("""\
	Usage: %s [-hvip:d:f] <doc.pdf>
		-h --help          print this help message then exit
		-v --version       print version then exit
		-i --icon          print icon then exit
		-p --page <p>      start on page int(p)
		-d --duration <t>  duration of the talk in minutes
		-f --feed          enable reading feed on stdin
		<doc.pdf>          file to present
	""" % name)
	if message:
		sys.stderr.write("%s\n" % message)
	sys.stderr.write(usage)
	sys.exit(code)

def exit_version():
	sys.stdout.write(("%s %s\n" % (os.path.basename(name), VERSION)).encode())
	sys.exit()

def exit_icon():
	import base64
	sys.stdout.write(base64.b64decode(ICON))
	sys.exit()


# options

try:
	options, args = getopt.getopt(args, "hvip:d:f", ["help", "version", "icon",
	                                                 "page=", "duration=",
	                                                 "feed"])
except getopt.GetoptError as message:
	exit_usage(message, 1)

start_page = 0
presentation_duration = 0
show_feed = False

for opt, value in options:
	if opt in ["-h", "--help"]:
		exit_usage()
	elif opt in ["-v", "--version"]:
		exit_version()
	elif opt in ["-i", "--icon"]:
		exit_icon()
	elif opt in ['-p', '--page']:
		start_page = int(value)
	elif opt in ["-d", "--duration"]:
		presentation_duration = int(value)
	elif opt in ["-f", "--feed"]:
		show_feed = True

if len(args) > 1:
	exit_usage("no more than one argument is expected", 1)


# application init ###########################################################

from objc import setVerbose
setVerbose(1)

from objc import nil, NO, YES
from Foundation import (
	NSLog, NSNotificationCenter,
	NSObject, NSTimer, NSError, NSString, NSData,
	NSAttributedString, NSUnicodeStringEncoding,
	NSURL, NSURLRequest, NSURLConnection,
	NSURLRequestReloadIgnoringLocalCacheData,
	NSAffineTransform,
	NSUserDefaults,
)

from AppKit import (
	NSApplication, NSBundle, NSEvent,
	NSApplicationDidFinishLaunchingNotification,
	NSOpenPanel, NSFileHandlingPanelOKButton,
	NSAlert, NSAlertDefaultReturn, NSAlertAlternateReturn,
	NSView,
	NSViewWidthSizable, NSViewHeightSizable,
	NSWindow,
	NSMiniaturizableWindowMask, NSResizableWindowMask, NSTitledWindowMask,
	NSBackingStoreBuffered,
	NSCommandKeyMask, NSAlternateKeyMask, NSControlKeyMask,
	NSMenu, NSMenuItem,
	NSGraphicsContext,
	NSCompositeClear, NSCompositeSourceAtop, NSCompositeCopy,
	NSRectFillUsingOperation, NSFrameRectWithWidth, NSFrameRect, NSEraseRect,
	NSRect, NSZeroRect,
	NSColor, NSCursor, NSFont,
	NSFontAttributeName,	NSForegroundColorAttributeName,
	NSStrokeColorAttributeName, NSStrokeWidthAttributeName,
	NSUpArrowFunctionKey, NSLeftArrowFunctionKey,
	NSDownArrowFunctionKey, NSRightArrowFunctionKey,
	NSHomeFunctionKey, NSEndFunctionKey,
	NSPageUpFunctionKey, NSPageDownFunctionKey,
	NSPrevFunctionKey, NSNextFunctionKey,
	NSF5FunctionKey,
	NSScreen, NSWorkspace, NSImage,
	NSBezierPath, NSRoundLineCapStyle,
)

from Quartz import (
	PDFDocument, PDFAnnotationText, PDFAnnotationLink,
	PDFActionNamed,
	kPDFActionNamedNextPage, kPDFActionNamedPreviousPage,
	kPDFActionNamedFirstPage, kPDFActionNamedLastPage,
	kPDFActionNamedGoBack, kPDFActionNamedGoForward,
	kPDFDisplayBoxCropBox,
)

from WebKit import (
	WebView,
)

from QTKit import (
	QTMovie, QTMovieView,
)

# QTKit is deprecated in 10.9 but AVFoundation will only be in PyObjC-3.0+
# so wait and see, and remember for future reference:
# https://developer.apple.com/library/mac/technotes/tn2300/_index.html


if sys.version_info[0] == 3:
	_s = NSString.stringWithString_
else:
	_s = NSString.stringWithUTF8String_

def _h(s):
	h, _ = NSAttributedString.alloc().initWithHTML_documentAttributes_(
		_s(s).dataUsingEncoding_(NSUnicodeStringEncoding), None)
	return h

ICON = NSImage.alloc().initWithData_(NSData.alloc().initWithBase64Encoding_(ICON))
CURSOR = NSImage.alloc().initWithData_(NSData.alloc().initWithBase64Encoding_(CURSOR))

app = NSApplication.sharedApplication()
app.activateIgnoringOtherApps_(True)

bundle = NSBundle.mainBundle()
info = bundle.localizedInfoDictionary() or bundle.infoDictionary()
info['CFBundleName'] = _s(NAME)
info['NSAppTransportSecurity'] = {'NSAllowsArbitraryLoads': YES}


restarted = False # has the application been restarted before actual launch

if launched_from_finder:
	# HACK: run application to get dropped filename if any and then stop it
	class DropApplicationDelegate(NSObject):
		def application_openFile_(self, app, filename):
			if filename != os.path.abspath(__file__).decode(sys.getfilesystemencoding()):
				args.append(filename.UTF8String())
		def applicationDidFinishLaunching_(self, notification):
			app.stop_(self)
	application_delegate = DropApplicationDelegate.alloc().init()
	app.setDelegate_(application_delegate)
	app.run()
	restarted = True


if args:
	url = NSURL.fileURLWithPath_(_s(args[0]))
else:
	class Opener(NSObject):
		def getURL(self):
			dialog = NSOpenPanel.openPanel()
			dialog.setAllowedFileTypes_(["pdf"])
			if dialog.runModal() == NSFileHandlingPanelOKButton:
				global url
				url, = dialog.URLs()
			else:
				exit_usage("please select a pdf file", 1)
			app.stop_(self)
	opener = Opener.alloc().init()
	opener.performSelectorOnMainThread_withObject_waitUntilDone_("getURL", None, False)
	app.run()
	restarted = True


# opening presentation

file_name = url.lastPathComponent()
pdf = PDFDocument.alloc().initWithURL_(url)
if not pdf:
	exit_usage("'%s' does not seem to be a pdf." % url.path(), 1)


# navigation

page_count = pdf.pageCount()
first_page, last_page = 0, page_count-1

past_pages = []
current_page = max(first_page, min(start_page, last_page))
future_pages = []

def _goto(page):
	global current_page
	current_page = page
	presentation_show(slide_view)

def _pop_push_page(pop_pages, push_pages):
	def action():
		try:
			page = pop_pages.pop()
		except IndexError:
			return
		push_pages.append(current_page)
		_goto(page)
	return action


back    = _pop_push_page(past_pages, future_pages)
forward = _pop_push_page(future_pages, past_pages)

def goto_page(page):
	page = min(max(first_page, page), last_page)
	if page == current_page:
		return
	
	if future_pages and page == future_pages[-1]:
		forward()
	elif past_pages and page == past_pages[-1]:
		back()
	else:
		del future_pages[:]
		past_pages.append(current_page)
		_goto(page)


pages = list(range(page_count)) # pages index

frames = [] # frames index
current_label = None
for page_number in range(page_count):
	page = pdf.pageAtIndex_(page_number)
	label = page.label()
	if label != current_label:
		# a new frame just started
		frames.append(page_number)
		current_label = label

sections = [] # sections index
outline = pdf.outlineRoot()
if outline:
	for i in range(outline.numberOfChildren()):
		section = outline.childAtIndex_(i)
		destination = section.destination()
		sections.append(pdf.indexForPage_(destination.page()))

def _next(index):
	for page in index:
		if page > current_page:
			return page
	return current_page

def _prev(index):
	for page in reversed(index):
		if page < current_page:
			return page
	return current_page

def home_page():    goto_page(first_page)
def end_page():     goto_page(last_page)
def next_page():    goto_page(_next(pages))
def prev_page():    goto_page(_prev(pages))
def next_frame():   goto_page(_next(frames))
def prev_frame():   goto_page(_prev(frames))
def next_section(): goto_page(_next(sections))
def prev_section(): goto_page(_prev(sections))


# annotations

def get_movie(url):
	"""return a QTMovie object from an url if possible/desirable"""
	if not (url and url.scheme() == "file"):
		return
	mimetype, _ = mimetypes.guess_type(url.absoluteString())
	if not (mimetype and (mimetype.startswith("video") or mimetype.startswith("audio"))):
		return
	if not QTMovie.canInitWithURL_(url):
		return
	movie, error = QTMovie.movieWithURL_error_(url, None)
	if error:
		return
	return movie

def annotations(page):
	return page.annotations() or []

notes  = defaultdict(list)
movies = {}
for page_number in range(page_count):
	page = pdf.pageAtIndex_(page_number)
	for annotation in annotations(page):
		annotation_type = type(annotation)
		if annotation_type == PDFAnnotationText:
			annotation.setShouldDisplay_(False)
			notes[page_number].append(annotation.contents())
		elif annotation_type == PDFAnnotationLink:
			movie = get_movie(annotation.URL())
			if movie:
				movies[annotation] = (movie, movie.posterImage())


# thumbnails

origin = 0
thumbnails = {}
for page_number in range(page_count):
	page = pdf.pageAtIndex_(page_number)
	_, (w, h) = page.boundsForBox_(kPDFDisplayBoxCropBox)
	width = MINIATURE_WIDTH-MINIATURE_MARGIN
	height = h*width/w
	thumbnail = page.thumbnailOfSize_forBox_((width, height), kPDFDisplayBoxCropBox)
	thumbnails[page_number] = (width, height, origin), thumbnail
	origin += height + MINIATURE_MARGIN
MINIATURES_HEIGHT = origin


# interaction state

IDLE, BBOX, CLIC, DRAW = range(4)
state = IDLE

drawings = defaultdict(list)


# page drawing ###############################################################

bbox = NSAffineTransform.transform()
cursor_location = (0, 0)

def draw_page(page):
	bbox.concat()
	
	NSEraseRect(page.boundsForBox_(kPDFDisplayBoxCropBox))
	page.drawWithBox_(kPDFDisplayBoxCropBox)
	
	NSColor.blackColor().setFill()
	for annotation in annotations(page):
		if not annotation in movies:
			continue
		bounds = annotation.bounds()
		
		_, poster = movies[annotation]
		if poster is None:
			continue
		
		bounds_size = bounds.size
		if bounds_size.height < MIN_POSTER_HEIGHT:
			continue
		
		NSRectFillUsingOperation(bounds, NSCompositeCopy)
		
		poster_size = poster.size()
		aspect_ratio = ((poster_size.width*bounds_size.height)/
		                (bounds_size.width*poster_size.height))
		if aspect_ratio < 1:
			dw = bounds.size.width * (1.-aspect_ratio)
			bounds.origin.x += dw/2.
			bounds.size.width -= dw
		else:
			dh = bounds.size.height * (1.-1./aspect_ratio)
			bounds.origin.y += dh/2.
			bounds.size.height -= dh
		
		poster.drawInRect_fromRect_operation_fraction_(
			bounds, NSZeroRect, NSCompositeCopy, 1.
		)
	
	for path in drawings[current_page]:
		NSColor.whiteColor().setStroke()
		path.setLineWidth_(2)
		path.stroke()
		NSColor.blackColor().setStroke()
		path.setLineWidth_(1)
		path.stroke()


# presentation ###############################################################

class SlideView(NSView):
	show_cursor = False
	hide_timer = None
	
	def drawRect_(self, rect):
		bounds = self.bounds()
		width, height = bounds.size
		
		NSRectFillUsingOperation(bounds, NSCompositeClear)
		
		# current page
		page = pdf.pageAtIndex_(current_page)
		page_rect = page.boundsForBox_(kPDFDisplayBoxCropBox)
		_, (w, h) = page_rect
		r = min(width/w, height/h)
		
		NSGraphicsContext.saveGraphicsState()
		transform = NSAffineTransform.transform()
		transform.translateXBy_yBy_(width/2., height/2.)
		transform.scaleXBy_yBy_(r, r)
		transform.translateXBy_yBy_(-w/2., -h/2.)
		transform.concat()
		draw_page(page)
		
		if self.show_cursor:
			cursor_bounds = NSRect()
			W, H = CURSOR.size()
			iw, ih = transform.transformSize_((1., 1.))
			cursor_bounds.size = (W/iw, H/ih)
			x, y = cursor_location
			cursor_bounds.origin = x-X_hot/iw, y-Y_hot/ih
			CURSOR.drawInRect_fromRect_operation_fraction_(
				cursor_bounds, NSZeroRect, NSCompositeSourceAtop, 1.
			)
		
		NSGraphicsContext.restoreGraphicsState()
	
	def showCursor(self):
		self.show_cursor = True
		self.setNeedsDisplay_(True)
		if self.hide_timer:
			self.hide_timer.invalidate()
		self.hide_timer = NSTimer.scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(
			5.,
			self, "hideCursor:",
			nil, NO)
	
	def hideCursor_(self, timer):
		self.show_cursor = False
		self.setNeedsDisplay_(True)


class MessageView(NSView):
	fps = 20. # frame per seconds for animation
	pps = 40. # pixels per seconds for scrolling
	
	input_lines = [u"…"]
	should_check = True
	
	def initWithFrame_(self, frame):
		assert NSView.initWithFrame_(self, frame) == self
		self.redisplay_timer = NSTimer.scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(
			1./self.fps,
			self, "redisplay:", nil,
			True
		)
		return self
	
	def redisplay_(self, timer):
		self.setNeedsDisplay_(True)
	
	def check_input(self):
		while True:
			ready, _, _ = select.select([sys.stdin], [], [], 0)
			if not ready:
				break
			line = sys.stdin.readline().decode('utf-8')
			self.input_lines.append(line.rstrip())
	
	def drawRect_(self, rect):
		if self.should_check:
			self.check_input()
			try:
				self.text = self.input_lines.pop(0)
			except IndexError:
				pass
			else:
				self.start = time.time()
				self.should_check = False
		text = NSString.stringWithString_(self.text)
		x = rect.size.width - self.pps*(time.time()-self.start)
		for attr in [{
			NSFontAttributeName:            NSFont.labelFontOfSize_(30),
			NSStrokeColorAttributeName:     NSColor.colorWithDeviceWhite_alpha_(0., .75),
			NSStrokeWidthAttributeName:     20.,
		}, {
			NSFontAttributeName:            NSFont.labelFontOfSize_(30),
			NSForegroundColorAttributeName: NSColor.colorWithDeviceWhite_alpha_(1., .75),
		}]:
			text.drawAtPoint_withAttributes_((x, 4.), attr)
		tw, _ = text.sizeWithAttributes_(attr)
		if x < -tw:
			self.should_check = True


# presenter view #############################################################

def hasModifiers(event, mask):
	return (event.modifierFlags() & mask) == mask

class PresenterView(NSView):
	transform = NSAffineTransform.transform()
	duration = presentation_duration * 60.
	absolute_time = True
	elapsed_duration = 0
	start_time = time.time()
	duration_change_time = 0
	show_help = True
	annotation_state = None
	notes_scale = 1.
	target_page = ""
	miniature_origin = 0
	page_state = None
	
	def draw_miniatures(self):
		_, (width, height) = self.bounds()
		x = width - MINIATURE_WIDTH
		width = MINIATURE_WIDTH-MINIATURE_MARGIN
		
		if self.page_state != current_page: # ensure current page in view when page changed
			self.page_state = current_page
			(_, h, o), _ = thumbnails[current_page]
			self.miniature_origin = min(o-MINIATURE_MARGIN, self.miniature_origin)
			self.miniature_origin = max(self.miniature_origin, o+h+MINIATURE_MARGIN-height)
		
		self.miniature_origin = min(MINIATURES_HEIGHT-height, self.miniature_origin)
		self.miniature_origin = max(self.miniature_origin, -MINIATURE_MARGIN)
		
		for i in range(page_count):
			(w, h, o), image = thumbnails[i]
			image.drawInRect_fromRect_operation_fraction_(
				((x, self.miniature_origin+height-o-h), (w, h)), NSZeroRect, NSCompositeCopy, 1.
			)
			if i == current_page:
				NSColor.yellowColor().setFill()
				NSFrameRectWithWidth(((x, self.miniature_origin+height-o-h), (w, h)), 2)

			page_number = NSString.stringWithString_("%s" % (i+1,))
			attr = {
				NSFontAttributeName:            NSFont.labelFontOfSize_(10),
				NSForegroundColorAttributeName: NSColor.whiteColor(),
			}
			tw, _ = page_number.sizeWithAttributes_(attr)
			page_number.drawAtPoint_withAttributes_((x-tw-2, self.miniature_origin+height-o-12), attr)
	
	
	def drawRect_(self, rect):
		bounds = self.bounds()
		width, height = bounds.size
		width -= MINIATURE_WIDTH
		
		margin = width / 20.
		current_width = (width-3*margin)*2/3.
		font_size = margin/2.
		
		# current
		self.page = pdf.pageAtIndex_(current_page)
		page_rect = self.page.boundsForBox_(kPDFDisplayBoxCropBox)
		_, (w, h) = page_rect
		r = current_width/w
		
		NSGraphicsContext.saveGraphicsState()
		transform = NSAffineTransform.transform()
		transform.translateXBy_yBy_(margin, height-1.5*margin)
		transform.scaleXBy_yBy_(r, r)
		transform.translateXBy_yBy_(0., -h)
		transform.concat()
		
		NSGraphicsContext.saveGraphicsState()
		draw_page(self.page)
		
		if state == DRAW:
			NSGraphicsContext.restoreGraphicsState()
			NSGraphicsContext.restoreGraphicsState()
			return
		
		# links
		NSColor.blueColor().setFill()
		for annotation in annotations(self.page):
			if type(annotation) == PDFAnnotationLink:
				NSFrameRectWithWidth(annotation.bounds(), .5)
		
		self.transform = transform
		self.transform.prependTransform_(bbox)
		self.resetCursorRects()
		self.transform.invert()
		
		NSGraphicsContext.restoreGraphicsState()
		
		# screen border & cropping
		NSColor.grayColor().setFill()
		NSFrameRect(page_rect)
		NSGraphicsContext.restoreGraphicsState()
		NSRectFillUsingOperation(((0, 0), (margin, height)), NSCompositeClear)
		NSRectFillUsingOperation(((margin, height-1.5*margin), (width+MINIATURE_WIDTH-margin, 1.5*margin)), NSCompositeClear)
		NSRectFillUsingOperation(((margin+r*w, 0), (width+MINIATURE_WIDTH-margin+r*w, height)), NSCompositeClear)
		NSRectFillUsingOperation(((0, 0), (width+MINIATURE_WIDTH, height-1.5*margin-r*h)), NSCompositeClear)
		
		
		# time
		now = time.time()
		if now - self.duration_change_time <= 1: # duration changed, display it
			clock = time.gmtime(self.duration)
		elif self.absolute_time:
			clock = time.localtime(now)
		else:
			running_duration = now - self.start_time + self.elapsed_duration
			clock = time.gmtime(abs(self.duration - running_duration))
		clock = NSString.stringWithString_(time.strftime("%H:%M:%S", clock))
		clock.drawAtPoint_withAttributes_((margin, height-1.4*margin), {
			NSFontAttributeName:            NSFont.labelFontOfSize_(margin),
			NSForegroundColorAttributeName: NSColor.whiteColor(),
		})
		app.dockTile().setBadgeLabel_(clock)
	
		# page number
		if self.target_page:
			page_number = NSString.stringWithString_("goto %s/%s" % (
				self.target_page, page_count))
		else:
			page_number = NSString.stringWithString_("(%s) %s/%s" % (
				self.page.label(), current_page+1, page_count))
		attr = {
			NSFontAttributeName:            NSFont.labelFontOfSize_(font_size),
			NSForegroundColorAttributeName: NSColor.whiteColor(),
		}
		tw, _ = page_number.sizeWithAttributes_(attr)
		page_number.drawAtPoint_withAttributes_((margin+current_width-tw,
		                                         height-1.4*margin), attr)
		
		# notes
		note = NSString.stringWithString_("\n".join(notes[current_page]))
		note.drawAtPoint_withAttributes_((margin, font_size), {
			NSFontAttributeName:            NSFont.labelFontOfSize_(font_size*self.notes_scale),
			NSForegroundColorAttributeName: NSColor.whiteColor(),
		})
		
		# help
		if self.show_help:
			help_text = _h("".join([
				"<table style='color: white; font-family: LucidaGrande; font-size: 8pt;'>"
			] + [
				"<tr><th style='padding: 0 1em;' align='right'>%s</th><td>%s</td></tr>" % h for h in HELP
			] + [
				"</table>"
			]))
			help_text.drawAtPoint_((2*margin+current_width, 0))
		

		# thumbnails
		self.draw_miniatures()

		# next page
		if current_page < last_page:
			page = pdf.pageAtIndex_(current_page+1)
		else:
			return
		page_rect = page.boundsForBox_(kPDFDisplayBoxCropBox)
		_, (w, h) = page_rect
		r = current_width/2./w
		
		NSGraphicsContext.saveGraphicsState()
		transform = NSAffineTransform.transform()
		transform.translateXBy_yBy_(2*margin+current_width, height-1.5*margin)
		transform.scaleXBy_yBy_(r, r)
		transform.translateXBy_yBy_(0., -h)
		transform.concat()
		
		NSEraseRect(page_rect)
		page.drawWithBox_(kPDFDisplayBoxCropBox)
		NSColor.colorWithCalibratedWhite_alpha_(.25, .25).setFill()
		NSRectFillUsingOperation(page_rect, NSCompositeSourceAtop)
		
		ibbox = NSAffineTransform.alloc().initWithTransform_(bbox)
		ibbox.invert()
		ibbox.concat()
		NSColor.grayColor().setFill()
		NSFrameRect(page_rect)
		NSGraphicsContext.restoreGraphicsState()
	
	
	def resetCursorRects(self):
		# updates rectangles only if needed (so that tooltip timeouts work)
		annotation_state = (self.transform.transformStruct(), current_page)
		if self.annotation_state == annotation_state:
			return
		self.annotation_state = annotation_state
		
		# reset cursor rects and tooltips
		self.discardCursorRects()
		self.removeAllToolTips()
		
		for i, annotation in enumerate(annotations(self.page)):
			if type(annotation) != PDFAnnotationLink:
				continue
			
			origin, size = annotation.bounds()
			rect = (self.transform.transformPoint_(origin),
			        self.transform.transformSize_(size))
			self.addCursorRect_cursor_(rect, NSCursor.pointingHandCursor())
			
			self.addToolTipRect_owner_userData_(rect, self, i)
	
	
	def view_stringForToolTip_point_userData_(self, view, tag, point, data):
		annotation = annotations(self.page)[data]
		return annotation.toolTip() or ""
	
	def zoomAt_by_(self, point, percent):
		bbox.translateXBy_yBy_(point.x, point.y)
		bbox.scaleBy_(exp(percent*0.01))
		bbox.translateXBy_yBy_(-point.x, -point.y)
	
	def keyDown_(self, event):
		def send(c): # resend event with modified character
			app.sendEvent_(NSEvent.keyEventWithType_location_modifierFlags_timestamp_windowNumber_context_characters_charactersIgnoringModifiers_isARepeat_keyCode_(
				event.type(), event.locationInWindow(), event.modifierFlags(), event.timestamp(), event.windowNumber(), event.context(),
				c, c, event.isARepeat(), ord(c)))
		
		c = event.characters()
		
		if hasModifiers(event, NSCommandKeyMask):
			c = event.charactersIgnoringModifiers()
			if c in "+=-_0)i": # slides scale
				if c == '=': c = '+'
				if c == '_': c = '-'
				if c == '+':
					self.zoomAt_by_(cursor_location,  5)
				elif c == '-':
					self.zoomAt_by_(cursor_location, -5)
				else: # reset bbox to identity
					global bbox
					bbox = NSAffineTransform.transform()
		
		if hasModifiers(event, NSControlKeyMask | NSCommandKeyMask):
			c = event.charactersIgnoringModifiers()
			if c not in 'f': # only handle cmd+ctrl+f as f for now
				return
		
		if c == 'q': # quit
			app.terminate_(self)
		
		elif c == 'r': # relaunch
			os.execv(__file__, [__file__, '--page', str(current_page), url.path()])
		
		elif c in "0123456789" + CR + DEL:
			if c == '0' and not self.target_page: # skip leading 0
				send(')')                         # and rather change zoom
				return
			if c == CR:
				if self.target_page:
					goto_page(int(self.target_page)-1)
				self.target_page = ''
			elif c == DEL:
				self.target_page = self.target_page[:-1]
			else:
				self.target_page += c
		
		elif c == ESC: # esc
			toggle_fullscreen(fullscreen=False)
		
		elif c == NSF5FunctionKey:
			toggle_fullscreen(fullscreen=True)
		
		elif c == 'x':
			global _switched_screens
			_switched_screens = not _switched_screens
			toggle_fullscreen()
			toggle_fullscreen()
		
		elif c == 'h':
			app.hide_(app)
		
		elif c == '?':
			self.show_help = not self.show_help
		
		elif c == ' ': # play/pause video
			if movie_view.isHidden(): # or toggle timer
				send('t')
				return
			
			playing = movie_view.movie().rate() > 0.
			if playing:
				movie_view.pause_(self)
			else:
				movie_view.play_(self)
		
		elif c in "<>": # movie navigation
			if movie_view.isHidden():
				return
			movie_view.pause_(self)
			if c == '<':
				movie_view.stepBackward_(self)
			else:
				movie_view.stepForward_(self)
		
		elif c == 't': # toggle clock/timer
			self.absolute_time = not self.absolute_time
			now = time.time()
			if self.absolute_time:
				self.elapsed_duration += (now - self.start_time)
			else:
				self.start_time = now
		
		elif c in "z[]{}": # timer management
			self.start_time = time.time()
			self.elapsed_duration = 0
			
			self.duration += {
				'{': -600,
				'[':  -60,
				'z':    0,
				']':   60,
				'}':  600,
			}[c]
			self.duration = max(0, self.duration)
			self.duration_change_time = time.time()
		
		elif c in "+=-_0)": # notes or web view scale
			if c == '=': c = '+'
			if c == '_': c = '-'
			
			if web_view.isHidden(): # scaling notes
				if c == '+':
					self.notes_scale *= 1.1
				elif c == '-':
					self.notes_scale /= 1.1
				else:
					self.notes_scale = 1.
			else:                   # scaling web view
				document = web_view.mainFrame().frameView().documentView()
				clip = document.superview()
				if c == '+':
					scale = (1.1, 1.1)
				elif c == '-':
					scale = (1./1.1, 1./1.1)
				else:
					scale = clip.convertSize_fromView_((1., 1.), None)
				clip.scaleUnitSquareToSize_(scale)
				document.setNeedsLayout_(True)
		
		elif c == 'e': # erase annotation
			del drawings[current_page]
		
		else:
			actions = {
				'f':                     toggle_fullscreen,
				'.':                     toggle_black_view,
				'b':                     toggle_black_view,
				'w':                     toggle_web_view,
				'm':                     toggle_movie_view,
				's':                     presentation_show,
				NSLeftArrowFunctionKey:  prev_page,
				NSUpArrowFunctionKey:    prev_page,
				NSPageUpFunctionKey:     prev_page,
				NSPrevFunctionKey:       prev_page,
				NSRightArrowFunctionKey: next_page,
				NSDownArrowFunctionKey:  next_page,
				NSPageDownFunctionKey:   next_page,
				NSNextFunctionKey:       next_page,
				NSHomeFunctionKey:       home_page,
				NSEndFunctionKey:        end_page,
			}
			if hasModifiers(event, NSCommandKeyMask):
				actions.update({
					NSLeftArrowFunctionKey:  back,
					NSRightArrowFunctionKey: forward,
					NSUpArrowFunctionKey:    prev_frame,
					NSDownArrowFunctionKey:  next_frame,
					NSPageUpFunctionKey:     prev_section,
					NSPageDownFunctionKey:   next_section,
				})
			
			action = actions.get(c, nop)
			action()
		
		refresher.refresh_()
	
	def scrollWheel_(self, event):
		if hasModifiers(event, NSCommandKeyMask):
			point = event.locationInWindow()
			point = self.transform.transformPoint_(point)
			self.zoomAt_by_(point, event.deltaY())
		else:
			if event.hasPreciseScrollingDeltas():
				self.miniature_origin -= event.scrollingDeltaY()
			else:
				self.miniature_origin -= event.scrollingDeltaY()*MINIATURE_WIDTH
		refresher.refresh_()

	
	def mouseDown_(self, event):
		global state
		assert state == IDLE
		if hasModifiers(event, NSCommandKeyMask):
			state = BBOX
		else:
			self.press_location = self.transform.transformPoint_(event.locationInWindow())
			state = CLIC
	
	def mouseMoved_(self, event):
		global cursor_location
		cursor_location = self.transform.transformPoint_(event.locationInWindow())
		slide_view.showCursor()
	
	def mouseDragged_(self, event):
		global state, cursor_location
		cursor_location = self.transform.transformPoint_(event.locationInWindow())
		if state == CLIC:
			if hypot(cursor_location.x-self.press_location.x, cursor_location.y-self.press_location.y) < 5:
				return
			self.path = NSBezierPath.bezierPath()
			self.path.setLineCapStyle_(NSRoundLineCapStyle)
			self.path.moveToPoint_(self.press_location)
			self.path.lineToPoint_(cursor_location)
			drawings[current_page].append(self.path)
			state = DRAW
		elif state == DRAW:
			self.path.lineToPoint_(cursor_location)
		elif state == BBOX:
			delta = self.transform.transformSize_((event.deltaX(), -event.deltaY()))
			bbox.translateXBy_yBy_(delta.width, delta.height)
		slide_view.showCursor()
		self.setNeedsDisplay_(True)
	
	def mouseUp_(self, event):
		global state
		if state == CLIC:
			self.click_(event)
		state = IDLE
		refresher.refresh_()
	
	def rightMouseUp_(self, event):
		prev_page()
		refresher.refresh_()
	
	def click_(self, event):
		_, (width, height) = self.bounds()
		ex, ey = event.locationInWindow()
		if ex > width - MINIATURE_WIDTH: # miniature
			for i in range(page_count):
				(_, h, o), _ = thumbnails[i]
				if ey + h + MINIATURE_MARGIN > self.miniature_origin-o+height:
					break
			goto_page(i)
			return

		annotation = self.page.annotationAtPoint_(self.press_location)
		if annotation is None:
			next_page()
			return
		
		if type(annotation) != PDFAnnotationLink:
			return
		
		if annotation in movies:
			movie, _ = movies[annotation]
			movie_view.setMovie_(movie)
			presentation_show(movie_view)
			movie_view.play_(self)
			return
		
		action = annotation.mouseUpAction()
		destination = annotation.destination()
		url = annotation.URL()
		
		if type(action) == PDFActionNamed:
			action_name = action.name()
			action = {
				kPDFActionNamedNextPage:     next_page,
				kPDFActionNamedPreviousPage: prev_page,
				kPDFActionNamedFirstPage:    home_page,
				kPDFActionNamedLastPage:     end_page,
				kPDFActionNamedGoBack:       back,
				kPDFActionNamedGoForward:    forward,
#				kPDFActionNamedGoToPage:     nop,
#				kPDFActionNamedFind:         nop,
#				kPDFActionNamedPrint:        nop,
			}.get(action_name, nop)
			action()
		
		elif destination:
			goto_page(pdf.indexForPage_(destination.page()))
		
		elif url:
			web_view.mainFrame().loadRequest_(NSURLRequest.requestWithURL_(url))


# window utils ###############################################################

def create_window(title, Window=NSWindow):
	window = Window.alloc().initWithContentRect_styleMask_backing_defer_screen_(
		PRESENTER_FRAME,
		NSMiniaturizableWindowMask|NSResizableWindowMask|NSTitledWindowMask,
		NSBackingStoreBuffered,
		NO,
		None,
	)
	window.setTitle_(title)
	window.makeKeyAndOrderFront_(nil)
	return window

def create_view(window, View=NSView):
	view = View.alloc().initWithFrame_(window.frame())
	window.setContentView_(view)
	window.setInitialFirstResponder_(view)
	return view

def add_subview(view, subview, autoresizing_mask=NSViewWidthSizable|NSViewHeightSizable):
	subview.setAutoresizingMask_(autoresizing_mask)
	subview.setFrameOrigin_((0, 0))
	view.addSubview_(subview)


# presentation window ########################################################

presentation_window = create_window(file_name)
presentation_view   = presentation_window.contentView()
frame = presentation_view.frame()

# slides

slide_view = SlideView.alloc().initWithFrame_(frame)
add_subview(presentation_view, slide_view)

# black view

class BlackView(NSView):
	def drawRect_(self, rect):
		bounds = self.bounds()
		NSRectFillUsingOperation(bounds, NSCompositeClear)

black_view = BlackView.alloc().initWithFrame_(frame)
add_subview(presentation_view, black_view)

# web view

web_view = WebView.alloc().initWithFrame_frameName_groupName_(frame, nil, nil)

class WebFrameLoadDelegate(NSObject):
	def webView_didCommitLoadForFrame_(self, view, frame):
		presentation_show(web_view)
web_frame_load_delegate = WebFrameLoadDelegate.alloc().init()
web_view.setFrameLoadDelegate_(web_frame_load_delegate)

add_subview(presentation_view, web_view)

# movie view

class MovieView(QTMovieView):
	def setHidden_(self, hidden):
		QTMovieView.setHidden_(self, hidden)
		if self.isHidden():
			self.pause_(self)

movie_view = MovieView.alloc().initWithFrame_(frame)
movie_view.setPreservesAspectRatio_(True)

add_subview(presentation_view, movie_view)

# message view

if show_feed:
	frame.size.height = 40
	message_view = MessageView.alloc().initWithFrame_(frame)
	add_subview(presentation_view, message_view, NSViewWidthSizable)


# views visibility

def presentation_show(visible_view=slide_view):
	for view in [slide_view, black_view, web_view, movie_view]:
		view.setHidden_(view != visible_view)

def toggle_view(view):
	presentation_show(view if view.isHidden() else slide_view)

def toggle_black_view(): toggle_view(black_view)
def toggle_web_view():   toggle_view(web_view)
def toggle_movie_view(): toggle_view(movie_view)

presentation_show()


# presenter window ###########################################################

presenter_window = create_window(file_name)
presenter_window.setAcceptsMouseMovedEvents_(True)
presenter_view   = create_view(presenter_window, PresenterView)

presenter_window.center()
presenter_window.makeFirstResponder_(presenter_view)


# handling full screens ######################################################

_switched_screens = False

def toggle_fullscreen(fullscreen=None):
	_fullscreen = presenter_view.isInFullScreenMode()
	if fullscreen is None:
		fullscreen = not _fullscreen
	
	if fullscreen != _fullscreen:
		screens = NSScreen.screens()
		if _switched_screens:
			screens = reversed(screens)
		for window, screen in reversed(list(zip([presenter_window, presentation_window],
		                                        screens))):
			view = window.contentView()
			if fullscreen:
				view.enterFullScreenMode_withOptions_(screen, {})
			else:
				view.exitFullScreenModeWithOptions_({})
		presenter_window.makeFirstResponder_(presenter_view)
	
	return _fullscreen


# application delegate #######################################################

# menus

def add_item(menu, title, action, key="", modifiers=NSCommandKeyMask, target=app):
	menu_item = menu.addItemWithTitle_action_keyEquivalent_(
		NSString.localizedStringWithFormat_(' '.join(("%@",) * len(title)), *(_s(s) for s in title)),
		action, key)
	menu_item.setKeyEquivalentModifierMask_(modifiers)
	menu_item.setTarget_(target)
	return menu_item

def setup_menu(delegate):
	main_menu = NSMenu.alloc().initWithTitle_("MainMenu")
	
	application_menuitem = main_menu.addItemWithTitle_action_keyEquivalent_("Application", None, ' ')
	application_menu = NSMenu.alloc().initWithTitle_("Application")
	
	add_item(application_menu, ["About", NAME], "about:", target=delegate)
	add_item(application_menu, ["Check for updates…"], "update:", target=delegate)
	application_menu.addItem_(NSMenuItem.separatorItem())
	add_item(application_menu, ["Hide", NAME], "hide:", 'h')
	add_item(application_menu, ["Hide Others"], "hideOtherApplications:", 'h', NSCommandKeyMask | NSAlternateKeyMask)
	add_item(application_menu, ["Show All"], "unhideAllApplications:")
	application_menu.addItem_(NSMenuItem.separatorItem())
	add_item(application_menu, ["Quit", NAME], "terminate:", 'q')
	main_menu.setSubmenu_forItem_(application_menu, application_menuitem)
	
	app.setMainMenu_(main_menu)
	
	app.setApplicationIconImage_(ICON)


# notifications

ID = "fr.imag.iihm.blanch.osx-presentation"
NO_NOTIFY = '.'.join([ID, 'no_notify'])

user_defaults = NSUserDefaults.alloc().init()

try:
	from Foundation import (NSUserNotificationCenter, NSUserNotification)
except ImportError:
	def notify_update(): pass
else:
	class UserNotificationCenterDelegate(NSObject):
		def userNotificationCenter_didActivateNotification_(self, center, notification):
			NSWorkspace.sharedWorkspace().openURL_(NSURL.URLWithString_(HOME))
		def userNotificationCenter_shouldPresentNotification_(self, center, notification):
			return True
	notification_delegate = UserNotificationCenterDelegate.alloc().init()
	notification_center = NSUserNotificationCenter.defaultUserNotificationCenter()
	if notification_center is not None:
		notification_center.setDelegate_(notification_delegate)
	
	def notify_update():
		if user_defaults.boolForKey_(NO_NOTIFY):
			return
		version = get_version()
		if version in [VERSION, None]:
			return
		notification = NSUserNotification.alloc().init()
		notification.setTitle_(_s(NAME))
		notification.setSubtitle_('A new version (%s) is available' % version)
		notification.setIdentifier_('.'.join([ID, version]))
		if notification_center is not None:
			notification_center.scheduleNotification_(notification)


def get_version():
	try:
		data, response, _ = NSURLConnection.sendSynchronousRequest_returningResponse_error_(
			NSURLRequest.requestWithURL_cachePolicy_timeoutInterval_(
				NSURL.URLWithString_(HOME + "releases/version.txt?v=%s"%VERSION),
				NSURLRequestReloadIgnoringLocalCacheData,
				2
			), None, None
		)
		assert response.statusCode() == 200 # found
		version = bytearray(data).decode("utf-8").strip()
	except:
		version = None
	return version


class ApplicationDelegate(NSObject):
	def about_(self, sender):
		app.orderFrontStandardAboutPanelWithOptions_({
			"ApplicationName":    _s(NAME),
			"Version":            _s(VERSION),
			"Copyright":          _s(COPYRIGHT),
			"ApplicationVersion": _s("%s %s" % (NAME, VERSION)),
			"Credits":            _h(CREDITS),
			"ApplicationIcon":    ICON,
		})
	
	def update_(self, sender):
		version = get_version()
		if version is None:
			NSAlert.alertWithError_(
				NSError.errorWithDomain_code_userInfo_("unable to connect to internet,", 1, {})
			).runModal()
			return
		
		if version == VERSION:
			title   = "No update available"
			message = "Your version (%@) of %@ is up to date."
		else:
			title =   "Update available"
			message = "A new version (%@) of %@ is available."
		
		button = NSAlert.alertWithMessageText_defaultButton_alternateButton_otherButton_informativeTextWithFormat_(
			title,
			"Go to website",
			("Enable" if user_defaults.boolForKey_(NO_NOTIFY) else "Disable") + " notification",
			"Cancel",
			message, version, _s(NAME),
		).runModal()
		if button == NSAlertDefaultReturn:
			NSWorkspace.sharedWorkspace().openURL_(NSURL.URLWithString_(HOME))
		elif button == NSAlertAlternateReturn:
			user_defaults.setBool_forKey_(not user_defaults.boolForKey_(NO_NOTIFY), NO_NOTIFY)
		else:
			pass
	
	
	def applicationDidFinishLaunching_(self, notification):
		setup_menu(self)
		notify_update()
	
	def applicationWillHide_(self, notification):
		self.fullscreen = toggle_fullscreen(fullscreen=False)
	
	def applicationDidUnhide_(self, notification):
		toggle_fullscreen(fullscreen=self.fullscreen)
	
	def applicationWillTerminate_(self, notification):
		presentation_show()

application_delegate = ApplicationDelegate.alloc().init()
app.setDelegate_(application_delegate)


# HACK: ensure ApplicationDelegate.applicationDidFinishLaunching_ is called
if restarted:
	NSNotificationCenter.defaultCenter().postNotificationName_object_(
		NSApplicationDidFinishLaunchingNotification, app)


# main loop ##################################################################

class Refresher(NSObject):
	def refresh_(self, timer=None):
		for window in app.windows():
			window.contentView().setNeedsDisplay_(True)
refresher = Refresher.alloc().init()

refresher_timer = NSTimer.scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(
	1.,
	refresher, "refresh:",
	nil, YES)

sys.exit(app.run())
