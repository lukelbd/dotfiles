#!/usr/bin/env bash
# shellcheck disable=2076
usage="latexmk [OPTIONS] FILE"
doc="
Auto-typeset LaTeX documents. This is similar to the famous PERL latexmk program, but
with some unique features. Opens the resulting typeset file in a macOS PDF viewer then
brings the terminal from which latexmk was invoked back to the foreground. This is
perfect for a split-window workflow, with the terminal on one half of the screen and the
PDF viewer on the other half.

Usage

  $usage

Positional arguments

  FILE

Optional arguments

  -h|--help      Print this message.
  -r|--raw       Print the raw unfiltered error messages. By default this script
                 parses and filters the latex engine output so it is easier to peruse.
  -q|--quick     Enable quick mode and skip rendering the PDF if it is newer than the
                 TeX file. This can be used with '-l' to jump to a line.
  -d|--diff      Run latexdiff on most 'recent' file. Requires files in your
                 directory are otherwise identically named, but end with unique
                 date strings YYYY-MM.tex or YYYY-MM-DD.tex
  -w|--word      Pass -w or --word to automatically convert latex to the Microsoft
                 Word format using pandoc. This can be useful for collaborating
                 with peers that do not know latex.
  [-l|--line]=N  The line number in the LaTeX document. If the viewer is Skim then
                 we will jump to this line in the PDF document.

Additional features

  * Automatically copies custom style and theme files from the '~/templates' folder to
    the working directory when they are requested in the tex document.
  * Automatically figures out which typesetting engine to use based on the imported
    packages (i.e. pdflatex, xelatex, etc.) and automatically figures out the
    number of times the command must be called, just like the original latexmk.
  * Deletes every extra file generated during typesetting except for .bbl and .pdf.
    Works by simply querying existing files before and after compilation. Implemented
    with an EXIT signal trap, so this also works if latexmk is interrupted.

See also

  https://mg.readthedocs.io/latexmk.html
"
# Function for raising error
echoerr() {
  echo "$*" 1>&2
}
raise() {
  echoerr "Usage: $usage"
  echoerr "Error: $*"
  exit 1
}
# Exit trap function
cleanup() {
  local files_rm files_new
  [ -n "$files_old" ] || return 0
  files_new=(*)  # new files
  ext_ignore=(tex bbl pdf docx png jpg jpeg eps gif)
  for file_new in "${files_new[@]}"; do
    [[ " ${files_old[*]} " =~ " $file_new " ]] && continue
    [[ " ${ext_ignore[*]} " =~ " ${file_new##*.} " ]] && continue
    files_rm+=("$file_new")
  done
  rm "${files_rm[@]}"
  echoerr "Removed files: ${files_rm[*]}"
}

# Commands
# TODO: Remove this since now simply remap GNU sed to first one in path.
[[ "$OSTYPE" =~ darwin* ]] && macos=true || macos=false
which gsed &>/dev/null && sedcmd=gsed || sedcmd=sed
$macos && [ "$sedcmd" == sed ] && \
  raise "GNU sed needed when running this script on OSX. Can be installed from Homebrew with 'brew install gnu-sed'."

# Parse args
trap cleanup EXIT  # remove files on exit or interruption!
shopt -s nullglob  # glob-expand into zero entries
raw=false
latex=pdflatex  # by default use pdflatex
bibtex=bibtex   # for compiling bibliographies
viewer=Skim     # default PDF viewer
quick=false     # quick mode active?
texdiff=false   # get difference pdf?
tex2docx=false  # option
while [ $# -gt 0 ]; do
  case $1 in
    -h|--help)     echoerr "$doc" && exit 0 ;;
    -r|--raw)      raw=true ;;
    -d|--diff)     texdiff=true ;;
    -w|--word)     tex2docx=true ;;
    -q|--quick)    quick=true ;;
    -l=*|--line=*) line=${1#*=} ;;
    [^-]*)
      [ -n "$filename" ] && raise "Got multiple filenames."
      filename="$1"
      ;;
    *) raise "Unknown arg $1."
  esac
  shift
done
[ -n "$filename" ] || raise "Must pass filename."
[ -r "$filename" ] || raise "File '$filename' does not exist."

# Get terminal program
if [ -z "$TERM_PROGRAM" ]; then
  terminal=MacVim
elif [[ "$TERM_PROGRAM" =~ 'Apple_Terminal' ]]; then  # or e.g. Apple_Terminal2.0
  terminal=Terminal
else
  terminal=$TERM_PROGRAM
fi

# Get paths
templates=$HOME/templates  # location of LaTeX style files and templates
echoerr "Filename: $filename"
if [[ "$filename" =~ / ]]; then  # i.e. contains directory specifier
  directory=${filename%/*}  # trim shortest pattern matching <stuff>/*, keep "stuff"
  filename=${filename##*/}  # trim longest pattern matching */<stuff>, keep "stuff"
  cd "$directory" || raise "Directory $directory does not exist."
fi
filestem=${filename%.tex}  # simple
diffname=${filename%.tex}_changes.tex

# Update repo
# TODO: Remove this after finishing figcp implementation
# NOTE: This is useful e.g. for pulling remote figure changes
git pull 2>/dev/null

# Quick mode adjustment
# WARNING: Cannot auto-enable quick mode in case e.g. user wants to
# update figures or re-compile after an error. Only auto-disable.
if ! [ -r "$filestem.pdf" ] || [ "$filename" -nt "$filestem.pdf" ]; then
  quick=false
fi

#-----------------------------------------------------------------------------#
# Get compile options and required packages for file
#-----------------------------------------------------------------------------#
# General utilities
inbraces() {  # get content inside braces
  cut -s -d'{' -f2 | cut -s -d'}' -f1 | tr ',' $'\n'
}
nocomments() {  # ignore comments. TODO: Maybe awk is better?
  [ $# -eq 1 ] || raise "Incorrect usage of nocomments()."
  grep -o '^[^%]*' "$1"
}
packages() {
  local sub file
  for file in "$@"; do
    nocomments "$file" \
      | grep -E '\\RequirePackage[^ ]|\\usepackage[^ ]|\\bibliographystyle[^ ]' \
      | $sedcmd 's/\[[^][]*\]//g;s/AtEndOfClass{//g;/#\|\[\|\]\|newcommand/d' \
      | inbraces
    for sub in '' font color; do
      nocomments "$file" \
        | grep '\\use'$sub'theme' \
        | inbraces \
        | sed 's/^/beamer'$sub'theme/'
    done
  done
}
texfind() {  # find files with kpsewhich and copy from folders it not present
  local ext name names file files
  names=("$@")
  [ "${#names[@]}" -eq 0 ] && return
  # Copy files from the templates directory if they were not already
  # NOTE: Test 'newer than' returns true if second file does not exist.
  for name in "${names[@]}"; do
    for ext in cls sty bst; do
      file=${templates}/${name}.${ext}
      if [ -r "$file" ] && [ "$file" -nt "./${file##*/}" ]; then
        echoerr "Copying file ${file##*/}."
        cp "$file" ./ 2>/dev/null  # ignore 'same file' error e.g. when inside templates directory
        [[ " ${localfiles[*]##*/} " =~ " ${file##*/} " ]] || localfiles+=("./${file##*/}")
      fi
    done
  done
  # Detect files and add to lists if not already present
  files=($(kpsewhich "${names[@]/%/.cls}" "${names[@]/%/.sty}" "${names[@]/%/.bst}"))
  for name in "${names[@]}"; do
    found=false
    for file in "${files[@]}"; do
      root=${file##*/}
      root=${root%.*}
      [ "$name" == "$root" ] || continue
      if [[ " ${files[*]} " =~ " ./${file##*/} " ]]; then
        found=true
        [[ " ${localfiles[*]##*/} " =~ " ${file##*/} " ]] || localfiles+=("./${file##*/}")
      else
        found=true
        [[ " ${distrofiles[*]##*/} " =~ " ${file##*/} " ]] || distrofiles+=("$file")
      fi
    done
    $found || raise "${name} not found"  # do not raise error if failed to re-copy file
  done
}

# Find class files, package files, bibliography names
# NOTE: This also iterates over subfiles for e.g. thesis composition
filenames=("$filename")
filenames+=($(nocomments "$filename" | grep -E '\\import\b|\\include\b|\\input\b' | inbraces))
echoerr "Checking files: ${filenames[*]}"
for file in "${filenames[@]}"; do
  nocomments=$(nocomments "$file")
  bibs+=($(echo "$nocomments" | grep -E '\\bibliography\b|\\nobibliography\b|\\addbibresource\b' | inbraces))
  iclasses+=($(echo "$nocomments" | grep '\\documentclass\b' | inbraces))
  classes+=("${iclasses[@]}")
  texfind "${iclasses[@]}"
  ipackages+=($(packages "$filename" | sort | uniq))  # first level deep
  packages+=("${ipackages[@]}")
  texfind "${ipackages[@]}"
  jpackages+=($(packages "${localfiles[@]}" | sort | uniq))  # second level deep
  packages+=("${jpackages[@]}")
  texfind "${jpackages[@]}";
done

# Set compiler and viewer options
# WARNING: lualatex is mostly a superset of xelatex and detection must be
# prioritized for beamer or else get weird errors e.g. missing tex gyre fonts.
echo "${packages[*]}" | grep -E '\bfontspec\b|\bxltxtra\b' &>/dev/null && latex=xelatex
echo "${classes[*]}" | grep '\bbeamer\b' &>/dev/null && latex=lualatex
echo "$nocomments" | grep -E '\\animategraphics\b' &>/dev/null && viewer='Adobe Acrobat Reader DC'

# Error and info messages
[ ${#classes[@]} -eq 0 ] && echoerr "Warning: Unknown document class."
[ ${#distrofiles[@]} -gt 0 ] && echoerr "Files found in TeX distro: ${distrofiles[*]##*/}"
[ ${#localfiles[@]} -gt 0 ] && echoerr "Files found locally: ${localfiles[*]##*/}"
[ "${#bibs[@]}" -eq 0 ] && bibliography=false || bibliography=true
if $bibliography; then
  bibs=("${bibs[@]%.bib}")  # remove extension if present
  bibfiles=("${bibs[@]/%/.bib}")  # add back extension
  echoerr "Bib files: ${bibfiles[*]}"
fi

#------------------------------------------------------------------------------#
# Compile the document(s) as many times as necessary and display them
#------------------------------------------------------------------------------#
# Run and filter output of latex comand
# First arg is 1 or 0, indicates whether to always print message
errfilt() {  # show only error messages separated by blank lines
  $sedcmd -E '/^! |^l\./!d' | $sedcmd $'s/^! /\\\n/g'
}
errcat() {  # ignore messages about packages and remove empty lines
  errfilt | grep -A2 '^$' | $sedcmd '/^$/d'
}
run() {
  local res cmd
  res=$("${@:2}" 2>&1)
  # shellcheck disable=2181
  if [ $? -ne 0 ] || [ "$1" -eq 1 ]; then
    if $raw || [[ "${*:2}" =~ "bibtex" ]]; then
      cmd=cat
    else
      cmd=errcat
    fi
    echo "$res" | $cmd | $sedcmd 's/^/  /' 1>&2
  fi
}

# Open the file(s) on specific page if possible
# See: https://sourceforge.net/p/skim-app/wiki/TeX_and_PDF_Synchronization/#setting-up-vim
# See also: https://stackoverflow.com/a/2058251/4970632
open() {
  ! $macos && echoerr 'Warning: Can only automatically open PDF files on macOS.' && return 1
  local appname pdfname texname
  appname=$1
  pdfname=$2
  texname=${pdfname%.pdf}.tex
  if [ "$appname" == 'Skim' ] && which displayline &>/dev/null && [ -n "$line" ]; then
    echoerr "Opening \"$pdfname\" and jumping to line $line (source $texname)"
    displayline -r "$line" "$pdfname" "$texname"
  else
    echoerr "Opening \"$pdfname\""
    command open -a "$appname" "$pdfname" &
  fi
}

# Set the flags for compiling
# * Setting synctex=1 is *required* for skim displayline to work.
#   See: https://atom.io/packages/skim-displayline
# * Nonstop mode means no interaction, but will keep trying to compile if
#   encounter errors. This is default.
# * The shellescape option helps use figures that aren't in actual .tex directory.
#   See: https://www.scivision.co/pdflatex-error-epstopdf-output-filename-not-allowed-in-restricted-mode/
flags=(-interaction=nonstopmode -shell-escape -synctex=1)
flags_tex=(${flags[@]})  # flags for pre-compilation steps
flags_pdf=(${flags[@]})  # flags for compilation step
files_old=(*)  # glob expansion to every filename
case $latex in
  pdflatex) stylized=PDFLaTeX flags_tex+=(-draftmode) ;;
  lualatex) stylized=LuaLaTeX flags_tex+=(-draftmode) ;;
  xelatex)  stylized=XeLaTeX flags_tex+=(-no-pdf) ;;
  *) raise "Unknown compiler \"$latex\"." ;;
esac
if $quick; then
  flags_tex+=(-synctex=1)  # synctex on first (only) run
else
  flags_pdf+=(-synctex=1)  # synctex on last run
fi

# Standard run
# TODO: Support synctex for difference files by determining difference
# file line number corresponding to current file line number.
# WARNING: XeLaTeX does not have a draft mode so compilation will be
# generally slower: https://tex.stackexchange.com/q/219811/73149
# WARNING: To keep exit code from pdflatex, pipe later on
# run 0 $latex $flags "$filestem"
echoerr "Running with ${stylized}..."
if ! $texdiff && ! $tex2docx; then
  echoerr 'Generating aux file...'  # maybe just need to generate glossary!
  run 0 "$latex" "${flags_tex[@]}" "$filestem"
  if ! $quick; then
    if $bibliography; then
      echoerr 'Generating bibliography...'
      run 0 "$bibtex" "$filestem"
      echoerr 'Incorporating bbl file...'
      run 0 "$latex" "${flags_tex[@]}" "$filestem"
    fi
    echoerr 'Generating PDF...'
    run 1 "$latex" "${flags_pdf[@]}" "$filestem"
    [ -r "$filestem.pdf" ] || raise "PDF not produced."
  fi
fi

# Difference-LaTeX file, with track changes
if $texdiff; then
  # Find files that come *before* current one in alphanumeric sorting
  prefix=$(sed -E 's/[_-]([0-9]{4}-)?([0-9]{2}-)?[0-9]{2}\.tex//g' <<< "$filename")
  prevnames=("$prefix"*[_-][0-9][0-9].tex)  # sorted manuscript files (glob is sorted by default)
  for index in "${!prevnames[@]}"; do  # expands to array of indices
    [ "${prevnames[index]}" == "$filename" ] && break
  done
  [ "$prefix" == "$filename" ] && raise "Invalid filename for generating difference file: $filename"
  [ "$index" -eq 0 ] && raise "Failed to find earlier version of current file: $filename"

  # Make the difference tex file and support line jumping
  # NOTE: skim-displayline will be prepended with '%DIF > ' in difference file
  prevname=${prevnames[index - 1]}
  echoerr "Running latexdiff on ${filename##*/} minus ${prevname##*/}"
  [ -e "$diffname" ] && rm "$diffname"  # previous file name
  tmpfile="$filestem.tmp"  # will be deleted by cleanup()
  cp "$filename" "$tmpfile"
  [ -n "$line" ] && $sedcmd -i "${line}s/$/  % skim-displayline/" "$tmpfile"
  latexdiff --append-context2cmd=abstract "$prevname" "$tmpfile" > "$diffname"
  [ -r $diffname ] || raise 'Difference file not produced.'
  line=$(grep -n -m 1 'skim-displayline$' "$diffname" | sed 's/\([0-9]*\).*/\1/')
  if [ $? -ne 0 ] || ! [[ "$line" =~ ^[0-9]+$ ]]; then
    echoerr 'Warning: Failed to detect difference file line.'
    unset line
  fi

  # Make the pdflatex calls necessary to generate tables of contents, bibligrapyy, etc.
  diffstem=${diffname%.tex}
  $latex "${flags_tex[@]}" "$diffstem" &>/dev/null
  if ! $quick; then
    if $bibliography; then
      $latex "${flags_tex[@]}" "$diffstem" &>/dev/null
      $bibtex "$diffstem" 1>&2  #&>/dev/null
    fi
    $latex "${flags_pdf[@]}" "$diffstem" | errcat 1>&2
    [ -r "$diffstem.pdf" ] || raise "Difference PDF not produced."
  fi
fi

# Convert to docx with pandoc; keeps figures and formats sections with Word styling
# * For citeproc see: https://github.com/jgm/citeproc
# * For xnos see: https://github.com/tomduck/pandoc-xnos
# Unfortunately neither xnos nor crossref work for numbering equations and figures
if $tex2docx; then
  type pandoc &>/dev/null || raise "Cannot convert to docx because pandoc is not installed. Try brew install pandoc."
  # flags=(--citeproc --filter=pandoc-crossref)
  # flags=(-M cref=true --citeproc --filter=pandoc-crossref)
  # flags=(-M cref=true --filter pandoc-crossref --citeproc)
  flags=(-M cref=true --filter pandoc-xnos)
  if $bibliography; then
    if [[ " ${packages[*]} " =~ natbib ]]; then
      flags+=(--natbib)
    elif [[ " ${packages[*]} " =~ biblatex ]]; then
      flags+=(--biblatex)
    else
      echoerr "Warning: Cannot convert to docx because bib package is unknown. Found packages: ${packages[*]}"
      bibliography=false
    fi
    $bibliography && flags+=("${bibfiles[@]/#/--bibliography=}")
  fi
  echoerr "Running pandoc to convert tex --> docx with flags ${flags[*]}"
  pandoc --output="$filestem.docx" "${flags[@]}" "$filename"
  [ -r "$filestem.docx" ] || raise "Docx file not produced."
fi

# Open the relevant file
! $texdiff && ! $tex2docx && open "$viewer" "$filestem.pdf"  # too jumpy if open everything!
$texdiff && open "$viewer" "$diffstem.pdf"
$tex2docx && open "Pages" "$filestem.docx"
$macos && command open -a "$terminal" &  # bring terminal back into focus
