#!/usr/bin/env bash
#-----------------------------------------------------------------------------#
# Typeset latex documents {{{1
#-----------------------------------------------------------------------------#
usage="latexmk [OPTIONS] FILE [DIFF_FILE]"  # {{{2
doc="
Typeset LaTeX documents. This is similar to the PERL latexmk program, but with some
unique features. Opens the resulting typeset file in a macOS PDF viewer then brings the
terminal from which latexmk was invoked back to the foreground (useful for split-window
workflows with the terminal and viewer each occupying half of the screen).

Usage

  $usage

Positional arguments

  FILE           The latex file.

Optional arguments

  -h|--help      Print this message.
  -r|--raw       Print the raw unfiltered error messages. By default this script
                 parses and filters the latex engine output so it is easier to peruse.
  -a|--aux       Generate the aux file only. This can be combined with -l to
                 quickly jump across an existing PDF.
  -p|--pdf       Generate the pdf file only. This can be used with very long
                 files for quicker updates.
  -n|--nobbl     Do not re-compile the bibliography. This can be used to speed
                 things up when citations are unchanged.
  -w|--word      Convert to docx file using pandoc. This can be useful for
                 collaborating with peers that do not know latex.
  -d|--diff      Run latexdiff on most 'recent' file. Requires files in your directory
                 that share the same prefix but end with NN, YYYY-MM, or YYYY-MM-DD.
  [-p|--prev]=F  Run latexdiff against this previous version of the current file.
                 This is an alternative to detecting automatically with --diff.
  [-l|--line]=N  The line number in the LaTeX document. If the viewer is Skim then
                 we will jump to this line in the PDF document.

Additional features

  * Automatically copies custom style and theme files from the '~/templates' folder to
    the working directory when they are requested in the tex document.
  * Automatically figures out which typesetting engine to use based on the imported
    packages (i.e. pdflatex, xelatex, etc.) and automatically figures out the
    number of times the command must be called, just like the original latexmk.
  * Deletes every extra file generated during typesetting except for .bbl and .pdf.
    Works by simply querying existing files before and after compilation. Implemented
    with an EXIT signal trap, so this also works if latexmk is interrupted.

See also

  https://mg.readthedocs.io/latexmk.html
"

# Initial stuff {{{2
# Note: This deletes everything except .tex .aux .bbl
raise() { echoerr "Usage: $usage"; echoerr "Error: $*"; exit 1; }
echoerr() { echo "$*" 1>&2; }
cleanup() {
  local files_rm files_new
  [ -n "$files_old" ] || return 0
  files_new=(*)  # new files
  ext_ignore=(aux tex bbl pdf docx png jpg jpeg eps gif)
  for file_new in "${files_new[@]}"; do
    [[ " ${files_old[*]} " =~ " $file_new " ]] && continue
    [[ " ${ext_ignore[*]} " =~ " ${file_new##*.} " ]] && continue
    files_rm+=("$file_new")
  done
  rm "${files_rm[@]}"
  echoerr "Removed files: ${files_rm[*]}"
}
trap cleanup EXIT  # remove files on exit or interruption!
shopt -s nullglob  # glob-expand into zero entries
[[ "$OSTYPE" =~ darwin* ]] && macos=true || macos=false
if [ -z "$TERM_PROGRAM" ]; then
  terminal=MacVim
elif [[ "$TERM_PROGRAM" =~ 'Apple_Terminal' ]]; then  # or e.g. Apple_Terminal2.0
  terminal=Terminal
else
  terminal=$TERM_PROGRAM
fi

# Parse arguments {{{2
latex=pdflatex  # default typesetting command
bibtex=bibtex   # default bibliography generator
viewer=Skim     # default PDF viewer
raw=false       # show raw command output?
nobbl=false     # do not update bbl file?
auxonly=false   # only update aux file?
pdfonly=false   # only update PDF file?
texdiff=false   # get difference pdf?
texdocx=false   # convert with pandoc?
while [ $# -gt 0 ]; do
  case $1 in  # {{{
    -h|--help)     echoerr "$doc" && exit 0 ;;
    -r|--raw)      raw=true ;;
    -a|--aux)      auxonly=true nobbl=true ;;
    -p|--pdf)      pdfonly=true nobbl=true ;; 
    -n|--nobbl)    nobbl=true ;;
    -d|--diff)     texdiff=true ;;
    -w|--word)     texdocx=true ;;
    -l=*|--line=*) linenum=${1#*=} ;;
    -p=*|--prev=*) prevname=${1#*=} texdiff=true ;;
    [^-]*) [ -n "$filename" ] && raise "File name already passed." || filename=$1 ;;
    *) raise "Unknown latexmk flag $1." ;;
  esac  # }}}
  shift
done
[ -n "$filename" ] || raise "Must pass filename."
[ -r "$filename" ] || raise "File '$filename' does not exist."

# Parse file names {{{2
templates=$HOME/templates  # location of LaTeX style files and templates
echoerr "Filename: $filename"
if [[ "$filename" =~ / ]]; then  # i.e. contains directory specifier
  directory=${filename%/*}  # trim shortest pattern matching <stuff>/*, keep "stuff"
  filename=${filename##*/}  # trim longest pattern matching */<stuff>, keep "stuff"
  cd "$directory" || raise "Directory $directory does not exist."
fi
filestem=${filename%.tex}  # simple
diffname=${filename%.tex}_changes.tex
if $auxonly && [ "$filename" -nt "$filestem.pdf" ]; then
  echo "Warning: TeX file is newer than PDF. SyncTeX may not work properly."
fi

#-----------------------------------------------------------------------------#
# Get compile flags and packages {{{1
#-----------------------------------------------------------------------------#
# Helper functions {{{2
inbraces() {  # get content inside braces
  cut -s -d'{' -f2 | cut -s -d'}' -f1 | tr ',' $'\n'
}
nocomments() {  # ignore comments. TODO: Maybe awk is better?
  [ $# -eq 1 ] || raise "Incorrect usage of nocomments()."
  grep -o '^[^%]*' "$1"
}
packages() {
  local sub file
  for file in "$@"; do
    nocomments "$file" \
      | grep -E '\\RequirePackage[^ ]|\\templatetype[^ ]|\\usepackage[^ ]|\\bibliographystyle[^ ]' \
      | sed 's/\[[^][]*\]//g;s/AtEndOfClass{//g;/#\|\[\|\]\|newcommand/d' \
      | inbraces
    for sub in '' font color; do
      nocomments "$file" \
        | grep '\\use'$sub'theme' \
        | inbraces \
        | sed 's/^/beamer'$sub'theme/'
    done
  done
}
texfind() {  # find files with kpsewhich and copy from folders it not present
  local ext name names file files
  names=("$@")
  [ "${#names[@]}" -eq 0 ] && return
  # Copy files from the templates directory if they were not already
  # NOTE: Test 'newer than' returns true if second file does not exist.
  for name in "${names[@]}"; do
    for ext in cls sty bst; do
      file=${templates}/${name}.${ext}
      if [ -r "$file" ] && [ "$file" -nt "./${file##*/}" ]; then
        echoerr "Copying file ${file##*/}."
        cp "$file" ./ 2>/dev/null  # ignore 'same file' error e.g. when inside templates directory
        [[ " ${localfiles[*]##*/} " =~ " ${file##*/} " ]] || localfiles+=("./${file##*/}")
      fi
    done
  done
  # Detect files and add to lists if not already present
  files=( \
    $(kpsewhich \
      "${names[@]/%/.cls}" \
      "${names[@]/%/.sty}" \
      "${names[@]/%/.bst}" \
      "${names[@]/%/.ldf}" \
    ) \
  )
  for name in "${names[@]}"; do
    found=false
    for file in "${files[@]}"; do
      root=${file##*/}
      root=${root%.*}
      [ "$name" == "$root" ] || continue
      if [[ " ${files[*]} " =~ " ./${file##*/} " ]]; then
        found=true
        [[ " ${localfiles[*]##*/} " =~ " ${file##*/} " ]] || localfiles+=("./${file##*/}")
      else
        found=true
        [[ " ${distrofiles[*]##*/} " =~ " ${file##*/} " ]] || distrofiles+=("$file")
      fi
    done
    $found || raise "${name} not found"  # do not raise error if failed to re-copy file
  done
}

# Find classes packages and bibliographies {{{2
# Note: This also iterates over subfiles for e.g. thesis composition
filenames=("$filename")
filenames+=($(nocomments "$filename" | grep -E '\\import\b|\\include\b|\\input\b' | inbraces))
echoerr "Checking files: ${filenames[*]}"
for file in "${filenames[@]}"; do
  nocomments=$(nocomments "$file")
  bibs+=($(echo "$nocomments" | grep -E '\\bibliography\b|\\nobibliography\b|\\addbibresource\b' | inbraces))
  iclasses+=($(echo "$nocomments" | grep '\\documentclass\b' | inbraces))
  classes+=("${iclasses[@]}")
  texfind "${iclasses[@]}"
  ipackages+=($(packages "$filename" | sort | uniq))  # first level deep
  packages+=("${ipackages[@]}")
  texfind "${ipackages[@]}"
  jpackages+=($(packages "${localfiles[@]}" | sort | uniq))  # second level deep
  packages+=("${jpackages[@]}")
  texfind "${jpackages[@]}";
done

# Set compiler and viewer options {{{2
# Warning: lualatex is mostly a superset of xelatex and detection must be
# prioritized for beamer or else get weird errors e.g. missing tex gyre fonts.
echo "${packages[*]}" | grep -E '\bfontspec\b|\bxltxtra\b' &>/dev/null && latex=xelatex
echo "${classes[*]}" | grep '\bbeamer\b' &>/dev/null && latex=lualatex
echo "$nocomments" | grep -E '\\animategraphics\b' &>/dev/null && viewer='Adobe Acrobat Reader DC'
[ ${#classes[@]} -eq 0 ] && echoerr "Warning: Unknown document class."
[ ${#distrofiles[@]} -gt 0 ] && echoerr "Files found in TeX distro: ${distrofiles[*]##*/}"
[ ${#localfiles[@]} -gt 0 ] && echoerr "Files found locally: ${localfiles[*]##*/}"
[ "${#bibs[@]}" -eq 0 ] && bibliography=false || bibliography=true
if ! $nobbl && $bibliography; then
  bibs=("${bibs[@]%.bib}")  # remove extension if present
  bibfiles=("${bibs[@]/%/.bib}")  # add back extension
  echoerr "Bib files: ${bibfiles[*]}"
fi

#------------------------------------------------------------------------------#
# Compile and display the document(s)  {{{1
#------------------------------------------------------------------------------#
# Helper functions {{{2
# First argument indicates whether to print message
# See: https://sourceforge.net/p/skim-app/wiki/TeX_and_PDF_Synchronization/#setting-up-vim
# See: https://stackoverflow.com/a/2058251/4970632
filter() {  # ignore messages about packages and remove empty lines
  sed -E '/^! |^l\./!d' | sed $'s/^! /\\\n/g' | grep -A2 '^$' | sed '/^$/d'
}
run() {
  local res
  res=$("${@:2}" 2>&1)
  # shellcheck disable=2181 disable=2001
  if [ $? -ne 0 ] || [ "$1" -eq 1 ]; then
    if $raw || [[ "${*:2}" =~ "bibtex" ]]; then
      echo "$res" | sed 's/^/  /' 1>&2
    else
      echo "$res" | filter | sed 's/^/  /' 1>&2
    fi
  fi
}
open() {
  ! $macos && echoerr 'Warning: Can only automatically open PDF files on macOS.' && return 1
  local appname pdfname texname
  appname=$1 pdfname=$2
  texname=${pdfname%.pdf}.tex
  if [ "$appname" == 'Skim' ] && which displayline &>/dev/null && [ -n "$linenum" ]; then
    echoerr "Opening \"$pdfname\" and jumping to line $linenum (source $texname)"
    displayline -r "$linenum" "$pdfname" "$texname"
  else
    echoerr "Opening \"$pdfname\""
    command open -a "$appname" "$pdfname" &
  fi
}

# Set flags for compiling {{{2
# Note: Setting synctex=1 is *required* for skim displayline to work.
# Note: Nonstop mode means no interaction, but keeps trying to compile through errors
# Note: The shellescape option helps use figures that aren't in actual .tex directory.
# See: https://atom.io/packages/skim-displayline
# See: https://www.scivision.co/pdflatex-error-epstopdf-output-filename-not-allowed-in-restricted-mode/
flags=(-interaction=nonstopmode -shell-escape -synctex=1)
flags_tex=(${flags[@]})  # flags for pre-compilation steps
flags_pdf=(${flags[@]})  # flags for compilation step
files_old=(*)  # glob expansion to every filename
case $latex in
  pdflatex) stylized=PDFLaTeX flags_tex+=(-draftmode) ;;
  lualatex) stylized=LuaLaTeX flags_tex+=(-draftmode) ;;
  xelatex)  stylized=XeLaTeX flags_tex+=(-no-pdf) ;;
  *) raise "Unknown compiler \"$latex\"." ;;
esac
if $auxonly; then
  flags_tex+=(-synctex=1)  # synctex on first (only) run
else
  flags_pdf+=(-synctex=1)  # synctex on last run
fi

# Get tex output using command {{{2
# Note XeLaTeX does not have a draft mode so compilation will be
# generally slower: https://tex.stackexchange.com/q/219811/73149
echoerr "Running with ${stylized}..."
if ! $texdiff && ! $texdocx; then
  if ! $pdfonly; then
    echoerr 'Generating aux file...'  # maybe just need to generate glossary!
    run 0 "$latex" "${flags_tex[@]}" "$filestem"
  fi
  if ! $auxonly; then
    if ! $nobbl && $bibliography; then
      echoerr 'Generating bibliography...'
      run 0 "$bibtex" "$filestem"
      echoerr 'Incorporating bbl file...'
      run 0 "$latex" "${flags_tex[@]}" "$filestem"
    fi
    echoerr 'Generating PDF...'
    run 1 "$latex" "${flags_pdf[@]}" "$filestem"
    [ -r "$filestem.pdf" ] || raise "PDF not produced."
  fi
fi

# Get tex difference file with track changes {{{2
# Todo: Support synctex for difference files by determining difference
# file line number corresponding to current file line number.
if $texdiff; then
  # Find files that come *before* current one in alphanumeric sorting
  if [ -z "$prevname" ]; then
    version='[_-]([0-9]{4}-)?([0-9]{2}-)?[0-9]{2}'
    prefix=$(sed -E "s/$version.*\$//g" <<< "$filename")
    suffix=$(sed -E "s/^.*$version//g" <<< "$filename")
    echo "Prefix: $prefix Suffix: $suffix"
    prevnames=("$prefix"*[_-][0-9][0-9]"$suffix")  # sorted manuscript files (glob is sorted by default)
    for index in "${!prevnames[@]}"; do  # expands to array of indices
      [[ "${prevnames[index]}" =~ '_changes.tex' ]] && continue
      [[ "${prevnames[index]}" == "$filename" ]] && break
    done
    [ "$prefix" == "$filename" ] && raise "Invalid filename for generating difference file: $filename"
    [ "$index" -eq 0 ] && raise "Failed to find earlier version of current file: $filename"
    prevname=${prevnames[index - 1]}  # previous before finding this one
  fi

  # Make the difference tex file and support line jumping
  # NOTE: skim-displayline will be prepended with '%DIF > ' in difference file
  echoerr "Running latexdiff on ${filename##*/} minus ${prevname##*/}"
  [ -e "$diffname" ] && rm "$diffname"  # previous file name
  tmpfile="$filestem.tmp"  # will be deleted by cleanup()
  cp "$filename" "$tmpfile"
  [ -n "$linenum" ] && sed -i "${linenum}s/$/  % skim-displayline/" "$tmpfile"
  latexdiff --append-context2cmd=abstract "$prevname" "$tmpfile" > "$diffname"
  [ -r $diffname ] || raise 'Difference file not produced.'
  linenum=$(grep -n -m 1 'skim-displayline$' "$diffname" | sed 's/\([0-9]*\).*/\1/')
  # shellcheck disable=SC2181
  if [ $? -ne 0 ] || ! [[ "$linenum" =~ ^[0-9]+$ ]]; then
    echoerr 'Warning: Failed to detect difference file line.'
    unset linenum
  fi

  # Make the pdflatex calls necessary to generate tables of contents, bibligrapyy, etc.
  diffstem=${diffname%.tex}
  if ! $pdfonly; then
    $latex "${flags_tex[@]}" "$diffstem" &>/dev/null
  fi
  if ! $auxonly; then
    if ! $nobbl && $bibliography; then
      $latex "${flags_tex[@]}" "$diffstem" &>/dev/null
      $bibtex "$diffstem" 1>&2  #&>/dev/null
    fi
    $latex "${flags_pdf[@]}" "$diffstem" | errcat 1>&2
    [ -r "$diffstem.pdf" ] || raise "Difference PDF not produced."
  fi
fi

# Convert to docx with pandoc {{{2
# This keeps figures and formats sections with word styling
# Use natbib flag for bst support (works): https://github.com/jgm/pandoc/issues/5405
# Use xnos is for auto numbering (does not work): https://github.com/tomduck/pandoc-xnos
# Use crossref for auto numbering (works): https://github.com/lierdakil/pandoc-crossref
# Use citeproc to handle crossref-output csl (works): https://github.com/jgm/citeproc
if $texdocx; then
  type pandoc &>/dev/null || raise "Cannot convert to docx because pandoc is not installed. Try brew install pandoc."
  # flags=(--citeproc --filter=pandoc-crossref)
  # flags=(-M cref=true --citeproc --filter=pandoc-crossref)
  flags=(-M cref=true --filter pandoc-xnos --filter pandoc-crossref --citeproc)
  if ! $nobbl && $bibliography; then
    if [[ " ${packages[*]} " =~ natbib ]]; then
      flags+=(--natbib)
    elif [[ " ${packages[*]} " =~ biblatex ]]; then
      flags+=(--biblatex)
    else
      echoerr "Warning: Cannot convert to docx because bib package is unknown. Found packages: ${packages[*]}"
      bibliography=false
    fi
    $bibliography && flags+=("${bibfiles[@]/#/--bibliography=}")
  fi
  echoerr "Running pandoc to convert tex --> docx with flags ${flags[*]}"
  pandoc --output="$filestem.docx" "${flags[@]}" "$filename"
  [ -r "$filestem.docx" ] || raise "Docx file not produced."
fi

# Open the relevant file
! $texdiff && ! $texdocx && open "$viewer" "$filestem.pdf"  # too jumpy if open everything!
$texdiff && open "$viewer" "$diffstem.pdf"
$texdocx && open "Pages" "$filestem.docx"
$macos && command open -a "$terminal" &  # bring terminal back into focus
