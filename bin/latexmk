#!/usr/bin/env bash
usage="latexmk [OPTIONS] FILE"
doc="
This script compiles LaTeX documents similar to latexmk but with custom
features and designed for use with vim. Opens the resulting typeset file in a
PDF viewer then brings the terminal from which this script was invoked back to
the foreground. This is perfect for split-window workflow, with left terminal
on left side of screen and PDF viewer on right side.

This script never *ever* generates random extra files -- it just queries
files present in directory before and after compilation, then removes the
new ones excepting 'pdf' and 'bbl' files. This is implemented with an EXIT
signal trap, and so works even if compilation is interrupted. Also, if you
add custom style and theme files to a '~/latex' folder, this script will try
to copy relevant files to the working directory when they are not found in
the TeXLive distribution with 'kpsewhich'.


Usage

  $usage

Positional arguments

  FILE

Optional arguments

  -h|--help   Print this message.
  -r|--raw    Print raw, unfiltered error messages. By default this script
              filters and parses the latex engine output so it is much easier
              to peruse.
  -d|--diff   Run latexdiff on most 'recent' file. Requires files in your
              directory are otherwise identically named, but end with unique
              date strings YYYY-MM.tex or YYYY-MM-DD.tex
  -w|--word   Pass -w or --word to automatically convert latex to the Microsoft
              Word format using pandoc. Useful for colaborating with peers that
              do not use latex.

Additional features

  * Never *ever* generate random extra files again -- this script just queries
    files present in directory before and after compilation, then removes
    the new ones. This is implemented with an EXIT signal trap, and so works
    even if compilation is interrupted.
  * If you add custom style and theme files to a '~/latex' folder, this script
    will try to copy relevant files to the working directory when they are
    not found in the TeXLive distribution with 'kpsewhich'.
"
# Function for raising error
raise() {
  echo "Usage: $usage"
  echo "Error: $@"
  exit 1
}
# Exit trap function
cleanup() {
  local files_rm files_new
  [ -n "$files_old" ] || return 0
  files_new=(*) # new files
  ext_ignore=(tex bbl pdf docx png jpg jpeg eps gif)
  for file_new in "${files_new[@]}"; do
    [[ " ${files_old[@]} " =~ " $file_new " ]] && continue
    [[ " ${ext_ignore[@]} " =~ " ${file_new##*.} " ]] && continue
    files_rm+=("$file_new")
  done
  rm "${files_rm[@]}"
  echo "Removed files: ${files_rm[@]}"
}

# Parse args
trap "cleanup" EXIT # remove files on exit or interruption!
shopt -s nullglob # glob-expand into zero entries
raw=false
latex=pdflatex    # by default use pdflatex
bibtex=bibtex     # for compiling bibliographies
texdiff=false     # get difference pdf?
tex2docx=false    # option
while [ $# -gt 0 ]; do
  case $1 in
    -h|--help) echo "$doc" && exit 0 ;;
    -r|--raw) raw=true ;;
    -d|--diff) texdiff=true ;;
    -w|--word) tex2docx=true ;;
    [^-]*)
      [ -n "$filename" ] && raise "Got multiple filenames."
      filename="$1" ;;
    *) raise "Unknown arg ${arg}."
  esac
  shift
done
[ -n "$filename" ] || raise "Must pass filename."
[ -r "$filename" ] || raise "File \"$filename\" does not exist."
type gsed &>/dev/null || raise "Need gsed installed. Use brew install coreutils."

# Get terminal program
if [ -z "$TERM_PROGRAM" ]; then
  terminal="MacVim"
elif [[ "$TERM_PROGRAM" =~ "Apple_Terminal" ]]; then # or e.g. Apple_Terminal2.0
  terminal="Terminal"
else
  terminal="$TERM_PROGRAM"
fi

# Get paths
templates="$HOME/latex" # location of LaTeX templates and style files
echo "Filename: $filename"
if [[ "$filename" =~ / ]]; then # i.e. contains directory specifier
  directory="${filename%/*}"    # trim shortest pattern matching <stuff>/*, keep "stuff"
  filename="${filename##*/}"    # trim longest pattern matching */<stuff>, keep "stuff"
  [ -d "$directory" ] || raise "Directory $directory does not exist."
  cd "$directory" # move there
fi
filestem="${filename%.tex}" # simple

#------------------------------------------------------------------------------#
# Get compile options from LaTeX commands
#------------------------------------------------------------------------------#
# Ignore comments
# TODO: Maybe awk is better?
nocomments() {
  cat "$1" | grep -o '^[^%]*'
}
# Get content inside braces
inbraces() {
  cut -s -d'{' -f2 | cut -s -d'}' -f1 | tr ',' ' '
}
# Show only error messages
errfilter() {
  cat - | sed -E '/^! |^l\./!d' | sed $'s/^! /\\\n/g' \
    | grep -A2 '^$' | sed '/^$/d'
}
# Run latex comand, first arg is 1 or 0, indicates whether to always print message
run() {
  local res cat
  res=$("${@:2}" 2>&1)
  if [ $? -ne 0 ] || [ $1 -eq 1 ]; then
    if $raw || [[ "${@:2}" =~ "bibtex" ]]; then
      cat=cat
    else
      cat=errfilter
    fi
    echo "$res" | $cat | sed 's/^/  /'
  fi
}


# First if GIF/animation in file, need to change from Skim to compatible viewer
nocomments "$filename" | grep '\\animategraphics' &>/dev/null \
  && viewer="Adobe Acrobat Reader DC" || viewer="Skim"

# Get actual .bib file or resource; will need it for
# The -n flag prevents printing every single line after running command
# nocomments "$filename" | egrep '\\bibliography{.*}|\\printbibliography|\\nobibliography{.*}' &>/dev/null \
#   && bibliography=true || bibliography=false
bibfile=$(nocomments "$filename" | gsed -n 's/^.*\\\(bibliography\|nobibliography\|addbibresource\){\(.*\)}.*$/\2/p')
if [ -z "$bibfile" ]; then
  bibliography=false
else
  bibliography=true
  bibfile="${bibfile%.bib}.bib" # add back extension, if abscent
  echo "Bibliography: \"$bibfile\""
fi

# Detect if we want to run latexdiff on this file
[[ "$filename" =~ .*[0-9][0-9][0-9][0-9]-[0-9][0-9]*.tex ]]
[ $? -eq 0 ] && dfilename="${filename%.tex}changes.tex" || dfilename=""

# Automatically choose from xelatex and pdflatex; just need xelatex for
# tex files that load fontspec, or use modules that themselves load fontspec
nocomments "$filename" | egrep 'fontspec|xltxtra' &>/dev/null
[ $? -eq 0 ] && latex=xelatex

# Use Lua if beamer present, will be faster
# Also required for beamerposter, not sure about other cases
nocomments "$filename" | grep 'documentclass.*{beamer}' &>/dev/null
[ $? -eq 0 ] && latex=lualatex

#------------------------------------------------------------------------------#
# Move required packages and sty files from custom folder
#------------------------------------------------------------------------------#
# Find LaTeX files with kpsewhich, and if not present, copy from custom folder
# Important to call kpsewhich with a list of files rather than calling it
# successively; otherwise can be extremely slow, for some strange reason
texfind() {
  local texlive copied names files typ ext
  [ $# -le 2 ] && return 1
  ext="$1" # first argument
  typ="$2" # second argument
  names=($(echo "${@:3}" | tr " " "\n" | sort)) # the previous arguments, sorted alphabetically
  files=($(kpsewhich ${names[@]/%/.${ext}})) # append suffix to each file
  for name in ${names[@]}; do
    file="${name}.${ext}" # file we want
    if [[ "${files[@]}" =~ "$file" ]] && ! [[ " ${files[@]}" =~ " ./${file}" ]]; then
      # TeX distribution sees file, and it's not in current directory
      texlive+=("$file")
    elif [ -r "${templates}/${file}" ]; then
      # Get file from custom templates folder, copy over
      copied+=("$file")
      cp "${templates}/${file}" ./
    else
      raise "${file} not found"
    fi
  done
  [ ${#texlive[@]} -gt 0 ] && echo "$typ found in TeXLive: ${texlive[@]}"
  [ ${#copied[@]} -gt 0 ] && echo "$typ copied from ~/${templates##*/}: ${copied[@]}"
}

# First the custom .cls files
classes=($(nocomments "$filename" | grep '^\\documentclass' | inbraces))
[ ${#classes[@]} -eq 1 ] || raise "Ambiguous document class: \"${classes[@]}\"."
texfind cls "Class file" $classes

# As above but for the RequirePackage lines in the .cls file. Note this is
# *incomplete*, as it cannot handle multi-line requirepackage commands.
# * Must delete stuff inside [] to account for possible nested {} argument
#   found there; see the regex from here: https://unix.stackexchange.com/a/14840/112647
# * Then we ignore lines with stray brackets; see https://stackoverflow.com/a/17050349/4970632
#   for how to do this with awk; for some reason sed wouldn't work, but gsed did work
# * Finally need to account for newcommand with RequirePackage inside it, which we
#   do by deleting lines containing a '#' character
classfile=$(kpsewhich ${classes}.cls)
[ -n $classfile ] || raise "You should never see this error, already checked for ${classes}.cls existence, check code."
rpackages=($(nocomments "$classfile" | grep '^.*\\RequirePackage' \
  | sed 's/\[[^][]*\]//g' | gsed '/\[\|\]/d' \
  | sed 's/AtEndOfClass{//g' | gsed '/newcommand\|#/d' \
  | inbraces))
texfind sty "Class sty dependency" ${rpackages[@]}

# As above but for .sty files
# Will also detect \usepackage{package1,package2} lists
packages=($(nocomments "$filename" |  egrep '^.*\\usepackage|^.*\\templatetype' \
  | sed 's/\[[^][]*\]//g' | gsed '/\[\|\]/d' \
  | sed 's/AtEndOfClass{//g' | gsed '/newcommand\|#/d' \
  | inbraces))
texfind sty "Preamble sty file" ${packages[@]}

# As above but for .bst file
bibstyle=($(nocomments "$filename" | grep '^.*\\bibliographystyle' | inbraces))
texfind bst "Bibstyle file" $bibstyle

# Next beamer theme
themes=($(nocomments "$filename" | grep '^.*\\usetheme' | inbraces | sed 's/^/beamertheme/'))
texfind sty "Theme file" $themes

# And beamer color theme
colorthemes=($(nocomments "$filename" | grep '^.*\\usecolortheme' | inbraces | sed 's/^/beamercolortheme/'))
texfind sty "Color theme file" $colorthemes

#------------------------------------------------------------------------------#
# Compile the document(s) and display them
# If bibliography present, compile once to get .aux file, run bibtex
# on the auxfile, then run *twice* for glossary/equation references.
#------------------------------------------------------------------------------#
# Set the flags for compiling
# * Nonstop mode means no interaction, but keep trying to compile if encounter errors.
# * The shellescape option helps use eps figures that aren't in actual .tex directory.
#   See: https://www.scivision.co/pdflatex-error-epstopdf-output-filename-not-allowed-in-restricted-mode/
flags="-interaction=nonstopmode --shell-escape"
files_old=(*) # glob expansion to every filename
case $latex in
  xelatex)  stylized=XeLaTeX ;;
  pdflatex) stylized=PDFLaTeX ;;
  lualatex) stylized=LuaLaTeX ;;
  *) raise "Unknown compiler \"$latex\"." ;;
esac
echo 'Running with '"${stylized}..."
# Aux file
# WARNING: To keep exit code from pdflatex, pipe later on
echo 'Generating aux file...' # maybe just need to generate glossary!
run 0 $latex -draftmode $flags "$filestem"
# Bibliography
if $bibliography; then
  echo 'Generating bibliography...'
  run 0 $bibtex "$filestem"
  echo 'Incorporating bbl file...'
  run 0 $latex -draftmode $flags "$filestem"
fi
# Final run
echo 'Generating PDF...'
run 1 $latex $flags "$filestem"
[ -r "$filestem.pdf" ] || raise "PDF not produced."

# Difference-LaTeX file, with track changes
if $texdiff; then
  if [ -z "$dfilename" ]; then
    echo "Warning: Previous version not found"
    texdiff=false
  else
    # Get files that come *before* current one in alphanumeric sorting
    prefix=${filename%[0-9][0-9][0-9][0-9]-[0-9][0-9]*.tex} # parameter expensions are fire yo
    pfiles=($prefix[0-9][0-9][0-9][0-9]-[0-9][0-9]*.tex) # sorted manuscript files (glob is sorted by default)
    for index in "${!pfiles[@]}"; do
      [ "${pfiles[index]}" == "$filename" ] && break
    done
    if [ "$index" -ne 0 ]; then
      # Get difference PDF, with changes highlighted
      pfilename="${pfiles[$((index-1))]}"
      echo "Running latexdiff on ${filename##*/} minus ${pfilename##*/}"
      [ -e "$dfilename" ] && rm "$dfilename"
      latexdiff "$pfilename" "$filename" > "$dfilename"
      # Finish the the pdflatex calls necessary to generate tables of contents, bibligrapyy, etc.
      if ! [ -r $dfilename ]; then
        echo "Warning: Difference file not produced" && texdiff=false
      else
        dfilestem="${dfilename%.tex}"
        if $bibliography; then
          $latex -draftmode $flags "$dfilestem" &>/dev/null
          $bibtex "$dfilestem" #&>/dev/null
        fi
        $latex -draftmode $flags "$dfilestem" &>/dev/null
        $latex $flags "$dfilestem" | sed -E '/^! |^l\./!d' | sed $'s/^! /\\\n/g' | tail +2
        ! [ -r "$dfilestem.pdf" ] && echo "Warning: Difference PDF not produced" && texdiff=false
      fi
    fi
  fi
fi

# Convert to docx with pandoc; keeps figures and formats sections with Word styling
if $tex2docx; then
  if ! type pandoc &>/dev/null; then
    echo "Warning: Pandoc not found; use brew install pandoc"
  else
    echo "Running pandoc to convert tex-->docx"
    $bibliography && panbib="--bibliography=$bibfile" || panbib=""
    echo pandoc --output="$filestem.docx" "$panbib" "$filename"
    pandoc --output="$filestem.docx" "$panbib" "$filename"
  fi
fi

# Open the files
open() { echo "Opening \"$2\""; command open -a "$1" "$2"; }
if $texdiff; then
  open "$viewer" "$dfilestem.pdf"
elif $tex2docx; then
  open "Pages" "$filestem.docx"
else
  open "$viewer" "$filestem.pdf"
fi
command open -a "$terminal" & # bring terminal back into focus

