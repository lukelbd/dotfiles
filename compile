#!/bin/bash
# This script compile LaTeX documents on macOS
# * Will compile a RTF version of document if filename is specially
#   formatted like manuscriptYYYY-MM-DD.tex
# * Will compile with a bibliography using any .bib file detected in
#   the same folder; useful because may want to keep the same .bib file
#   for every version of the manuscript. If you have more than one .bib file
#   the function will fail.
shopt -s nullglob # glob-expand into zero entries
filename="$1" # the current file
htmlcompile="$2" # option
if [ -z "$filename" ]; then
  echo "ERROR: Must call compile-script with filename."
  exit 1
fi
if [ -z "$htmlcompile" ]; then
  echo "ERROR: Must call compile-script with true/false compile option for HTML version."
  exit 1
fi
if [ ! -r "$filename" ]; then
  echo "ERROR: File \"$filename\" does not exist."
  exit 1
fi

# Helper function for deleting extra files
# Call this before exiting every time
oldfiles=(*) # glob expansion to every filename
function cleanup() {
  # Delete extra files
  newfiles=(*) # new files
  deletefiles=() # record deleted
  ignorestems=(tex html rtf pdf bbl doc) # ignore these
  for filenew in "${newfiles[@]}"; do
    if [[ ! " ${oldfiles[@]} " =~ " $filenew " ]]; then
      if [[ ! " ${ignorestems[@]} " =~ " ${filenew##*.} " ]]; then
        echo "Removed file: $filenew."
        rm "$filenew" # delete the file
        deletefiles+=("$filenew")
      fi
    fi
  done
  # [ "${#deletefiles[@]}" -gt 0 ] && echo "Deleted files:"" ${deletefiles[@]}"
}

# Enter directory of our file to make life easier
if [[ "$filename" =~ / ]]; then # i.e. contains directory specifier
  directory="${filename%/*}" # trim shortest pattern matching <stuff>/*, keep "stuff"
  filename="${filename##*/}" # trim longest pattern matching */<stuff>, keep "stuff"
  if [ ! -d "$directory" ]; then
    echo "ERROR: Directory does not exist."
    exit 1
  fi
  cd "$directory" # move there
fi

# Get filestem for running commands
filestem="${filename%.tex}"

# First detect format of filename; will get the DIFFERENCE document
# if the format looks like yyyy-mm-ddmanuscript.tex; in this case probably
# want the difference between this one and the *previous* date
# if [[ "$filename" =~ ^manuscript....-..-..\.tex$ ]] || [[ "$filename" =~ ^supplementary....-..-..\.tex$ ]]; then
[[ "$filename" =~ manuscript ]] && string=manuscript
[[ "$filename" =~ supplementary ]] && string=supplementary
if [ ! -z $string ]; then
  rfilename="$filestem.rtf" # the RTF for Dave
  dfilename="changes${filename#$string}" # the difference file
  echo "This file is a manuscript. Will run latexdiff on the previous version."
else
  rfilename="" # keep empty
  dfilename="" # keep empty
  echo "This file is not a manuscript. Will not run latexdiff."
fi

# Run filtered LaTeX command; if any .bib exists, do the bibtex workflow
# See: https://stackoverflow.com/a/11163357/4970632
# set +H # turn off exclamation-point-interpretation in double-quote string
flags="-interaction=nonstopmode"
bibfiles=(*.bib) # glob expansion of bibTeX files; for now don't expect "standard" bibtex format
if [ ${#bibfiles[@]} -gt 1 ]; then
  echo "ERROR: Ambiguous which bibliography we should choose. Found the following: ${bibfiles[@]}."
  exit 1
# elif [ ${#bibfiles[@]} -eq 1 ] && [ $string != "supplementary" ]; then
elif [ ${#bibfiles[@]} -eq 1 ]; then
  bibfile="${bibfiles[0]}" # choose this one
fi

# Compile normal PDF, or the track-changes version
# * Always compile TWICE to enable glossary-references, equation-references
# * If bibliography present, compile once to get .aux file, run bibtex
#   on the auxfile (cannot call bibtex <file>.tex; must be bibtex <file> or
#   bibtex <file>.aux), then run TWICE as before.
# latex=xelatex
latex=pdflatex
bibtex=bibtex
if [ ! -z "$bibfile" ]; then
  echo "Preparing bibliography $bibfile..."
  $latex -draftmode $flags "$filestem" &>/dev/null
  $bibtex "$filestem" #&>/dev/null
fi
echo "Typesetting PDF from $filename..."
$latex -draftmode $flags "$filestem" &>/dev/null
$latex $flags "$filestem" | sed -E '/^! |^l\./!d' | sed $'s/^! /\\\n/g' | tail +2
if [ ! -r "$filestem.pdf" ]; then
  echo "ERROR: Failed to produce PDF."
  cleanup
  exit 1
fi

# Get difference-LaTeX file, with track changes
if [ ! -z "$dfilename" ] && false; then
  [ -r "$dfilename" ] && rm "$dfilename" # otherwise shows up in list
  # texfiles=(*.tex) # delete old difference
  texfiles=($string????-??-??.tex) # sorted manuscript files (glob is sorted by default)
  for index in "${!texfiles[@]}"; do
    [ "${texfiles[$index]}" == "$filename" ] && break
      # get the part of list corresponding to files that
      # come BEFORE current one in alphanumeric sorting
  done
  if [ $index -eq 0 ]; then # the index just before break
    echo "WARNING: Cannot find suitable .tex file for latexdiff."
  else
    cfilename="${texfiles[$(($index - 1))]}" # previous index
    echo "Typesetting difference-PDF from $filename minus $cfilename..." # message
    latexdiff "$cfilename" "$filename" > "$dfilename"
    # "$dfilename" # suppress errors
    if [ ! -r $dfilename ]; then
      echo "ERROR: $dfilename not produed."
      cleanup
      exit 1
    fi
  fi # end check for suitable difference file
fi # end check whether file-format implies we want difference

# Get HTML or RTF-LaTeX file
if [ ! -z "$rfilename" ] && $htmlcompile; then
  echo "Creating HTML file with htlatex."
  htlatex "$filename" | sed -E '/^! |^l\./!d' | sed $'s/^! /\\\n/g' | tail +2
  if [ ! -r "$filestem.html" ]; then
    echo "ERROR: Conversion to HTML failed."
    cleanup
    exit 1
  fi
  mv "$filestem.html" "$filestem.doc"
  # echo "Creating RTF file with htlatex."
  # latex2rtf "$filename"
  # # | sed -E '/^! |^l\./!d' | sed $'s/^! /\\\n/g' | tail +2
  # if [ ! -r "$filestem.rtf" ]; then
  #   echo "ERROR: Conversion to RTF failed."
  #   cleanup
  #   exit 1
  # fi
fi

# Call cleanup
cleanup

# Finally open up in Skim and return focus to terminal
open -a Skim "$filestem.pdf" # open file
[ $TERM_PROGRAM = "Apple_Terminal" ] && app="Terminal" || app="$TERM_PROGRAM"
if [ -z $TERM_PROGRAM ]; then
  echo "ERROR: Could not find terminal from which this command executed."
  exit 1
fi
open -a $app # bring terminal back into focus

