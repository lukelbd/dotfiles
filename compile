#!/bin/bash
# This script compile LaTeX documents on macOS
# * Will compile a RTF version of document if filename is specially
#   formatted like manuscriptYYYY-MM-DD.tex
# * Will compile with a bibliography using any .bib file detected in
#   the same folder; useful because may want to keep the same .bib file
#   for every version of the manuscript. If you have more than one .bib file
#   the function will fail.
shopt -s nullglob # glob-expand into zero entries
filename="$1" # the current file
htmlcompile="$2" # option
if [ -z "$filename" ]; then
  echo "ERROR: Must call compile-script with filename."
  exit 1
fi
if [ -z "$htmlcompile" ]; then
  echo "ERROR: Must call compile-script with true/false compile option for HTML version."
  exit 1
fi
if [ ! -r "$filename" ]; then
  echo "ERROR: File \"$filename\" does not exist."
  exit 1
fi

# Initial stuff
if [[ "$filename" =~ / ]]; then # i.e. contains directory specifier
  directory="${filename%/*}" # trim shortest pattern matching <stuff>/*, keep "stuff"
  filename="${filename##*/}" # trim longest pattern matching */<stuff>, keep "stuff"
  [ ! -d "$directory" ] && echo "ERROR: Directory $directory does not exist." && exit 1
  cd "$directory" # move there
fi
filestem="${filename%.tex}" # simple

# Parse raw file to get some options
# First if GIF/animation in file, need to change from Skim to compatible viewer
cat "$filename" | grep -v '^ *%' | grep '\\animategraphics' &>/dev/null && viewer="Adobe Acrobat Reader DC" || viewer="Skim"
# Next detect if bibliography is present
cat "$filename" | grep -v '^ *%' | egrep '\\bibliography{.*}|\\printbibliography' &>/dev/null && bibliography=true || bibliography=false
# Finally detect if we want to run latexdiff on this file
[[ "$filename" =~ .*[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9].tex ]] && dfilename="${filename%.tex}changes.tex" || dfilename="" # keep empty
# And detect if beamer presentation
cat "$filename" | grep '\\documentclass\[.*\]{beamer}' &>/dev/null && beamer=true || beamer=false
$beamer && echo "Beamer presentation detected." && dfilename="" # never want difference files on beamer presentations, duh

# Set the flags for compiling
# * Nonstop mode means no interaction, but keep trying to compile if encounter errors.
# * The shellescape option helps use eps figures that aren't in actual .tex directory.
#   See: https://www.scivision.co/pdflatex-error-epstopdf-output-filename-not-allowed-in-restricted-mode/
flags="-interaction=nonstopmode --shell-escape"

# Helper function for deleting extra files
# Call this before exiting every time
oldfiles=(*) # glob expansion to every filename
function cleanup() {
  # Delete extra files
  newfiles=(*) # new files
  deletefiles=() # record deleted
  ignorestems=(tex html rtf pdf bbl doc png jpg jpeg eps gif) # ignore these
  for filenew in "${newfiles[@]}"; do
    if [[ ! " ${oldfiles[@]} " =~ " $filenew " ]]; then
      if [[ ! " ${ignorestems[@]} " =~ " ${filenew##*.} " ]]; then
        echo "Removed file: $filenew."
        rm "$filenew" # delete the file
        deletefiles+=("$filenew")
      fi
    fi
  done
  # [ "${#deletefiles[@]}" -gt 0 ] && echo "Deleted files:"" ${deletefiles[@]}"
}

# Compile normal PDF, or the track-changes version
# * Always compile TWICE to enable glossary-references, equation-references
# * If bibliography present, compile once to get .aux file, run bibtex
#   on the auxfile (cannot call bibtex <file>.tex; must be bibtex <file> or
#   bibtex <file>.aux), then run TWICE as before.
$beamer && latex=xelatex || latex=pdflatex # some fancy .sty beamer packages need xelates
latex=pdflatex
bibtex=bibtex
if $bibliography; then
  echo "Preparing bibliography..."
  $latex -draftmode $flags "$filestem" &>/dev/null
  $bibtex "$filestem" #&>/dev/null
fi
echo "Typesetting PDF from $filename..."
$latex -draftmode $flags "$filestem" &>/dev/null
$latex $flags "$filestem" | sed -E '/^! |^l\./!d' | sed $'s/^! /\\\n/g' | tail +2
if [ ! -r "$filestem.pdf" ]; then
  echo "ERROR: PDF not produced." && cleanup
  exit 1
fi

# Get difference-LaTeX file, with track changes
if [ ! -z "$dfilename" ] && [[ ! "$dfilename" =~ meeting ]]; then
  echo "The filename contains a date string. Will run latexdiff on the previous version."
  # Check for earlier version
  prefix=${filename%[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9].tex} # parameter expensions are fire yo
  pfiles=($prefix[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9].tex) # sorted manuscript files (glob is sorted by default)
  # echo PREFIX $prefix FILES ${pfiles[@]}
  for index in "${!pfiles[@]}"; do
    [ "${pfiles[$index]}" == "$filename" ] && break
      # get the part of list corresponding to files that
      # come BEFORE current one in alphanumeric sorting
  done
  # Create difference file if earlier version exists
  if [ "$index" -eq 0 ]; then echo "WARNING: Cannot find previous version of this file."
  else # Tests index just before we broke from loop
    # Create difference texfile
    pfilename="${pfiles[$(($index - 1))]}" # previous index
    echo "Typesetting difference-PDF from $filename minus $pfilename..." # message
    [ -e "$dfilename" ] && rm "$dfilename"
    latexdiff "$pfilename" "$filename" > "$dfilename"
    if [ ! -r $dfilename ]; then
      echo "ERROR: Difference file not produed." && cleanup
      exit 1
    fi
    # Compile difference
    dfilestem="${dfilename%.tex}"
    if $bibliography; then
      echo "Preparing bibliography..."
      $latex -draftmode $flags "$dfilestem" &>/dev/null
      $bibtex "$dfilestem" #&>/dev/null
    fi
    echo "Typesetting PDF from $filename..."
    $latex -draftmode $flags "$dfilestem" &>/dev/null
    $latex $flags "$dfilestem" | sed -E '/^! |^l\./!d' | sed $'s/^! /\\\n/g' | tail +2
    if [ ! -r "$dfilestem.pdf" ]; then
      echo "ERROR: Difference PDF not produced." && cleanup
      exit 1
    fi
  fi
fi

# Get HTML or RTF-LaTeX file
if $htmlcompile; then
# if [ ! -z "$rfilename" ] && $htmlcompile; then
  # echo "HIHIHIHI"
  echo "Creating HTML file with htlatex."
  htlatex "$filename" | sed -E '/^! |^l\./!d' | sed $'s/^! /\\\n/g' | tail +2
  if [ ! -r "$filestem.html" ]; then
    echo "ERROR: Conversion to HTML failed." && cleanup
    exit 1
  fi
  mv "$filestem.html" "$filestem.doc"
  # echo "Creating RTF file with latex2rtf."
  # latex2rtf "$filename" # | sed -E '/^! |^l\./!d' | sed $'s/^! /\\\n/g' | tail +2
  # if [ ! -r "$filestem.rtf" ]; then
  #   echo "ERROR: Conversion to RTF failed." && cleanup
  #   exit 1
  # fi
fi

# Clean things up and open the appropriate apps
cleanup # delete new files
[ ! -z "$dfilestem" ] && open -a "$viewer" "$dfilestem.pdf" # open this first; make sure to test dfilestem
open -a "$viewer" "$filestem.pdf" # open this next
[ -z $TERM_PROGRAM ] && echo "ERROR: Could not find terminal from which this command executed." && exit 1
[ $TERM_PROGRAM = "Apple_Terminal" ] && terminal="Terminal" || terminal="$TERM_PROGRAM"
open -a $terminal # bring terminal back into focus

