#!/usr/bin/env python3
"""
Script to set up magic commands and other notebook properties.
Just call this in the first cell with "run pyfuncs/notebook". And voila!
Call with optional directory argument to make that the new working directory.

Notes on python figures:
  * Can use InlineBackend rc configuration to make inline figure properties
    different from figure.<subproperty> settings in rcParams.
  * Problem is, whenever rcParams are reset/pyfuncs module is reloaded, the previous
    InlineBackend properties disappear.
  * It is *also* necessary to maintain separate savefig options, including 'transparent'
    and 'facecolor' -- cannot just set these to use the figure properties.
    If transparent set to False, saved figure will have no transparency *even if* the
    default figure.facecolor has zero alpha. Will *only* be transparent if alpha explicitly
    changed by user command. Try playing with settings in plot.globals to see.
  * In conclusion: Best workflow is probably to set InlineBackend settings to empty, but
    control figure settings separate from savefig settings. Also need to test: if
    transparent=True but patches were set to have zero transparency manually, will they
    be made re-transparent when figure is saved?

Notes on jupyter configuration:
  * In .jupyter, the jupyter_nbconvert_config.json sets up locations of stuff; templates
      for nbextensions and formatting files for markdown/code cells.
  * In .jupyter, the jupyter_notebook_config.json installs the configurator extension
      for managing extra plugins.
  * In .jupyter, not sure yet how to successfully use jupyter_console_config.py and
      jupyter_notebook_config.py; couldn't get it to do what this function does on startup.
  * In .jupyter/custom, current_theme.txt lists the current jupyterthemes theme, custom.css
      contains CSS formatting for it, and fonts should contain font files -- note that there
      are not font files on my Mac, even though jupyterthemes works; sometimes may be empty
  * In .jupyter/nbconfig, tree.json loads the extra tab for the NBconfigurator, and 
      common.json gives option to hide incompatible plugs, and notebook.json contains all
      the new settings; just copy it over to current notebook to update
"""
# Imports
import matplotlib as mpl
from IPython import get_ipython
from IPython.utils.path import filefind
from IPython.core.magic import line_magic, Magics, magics_class, register_line_magic
from contextlib import redirect_stdout
import io
import os
import sys
import socket
cd = os.getcwd()
home = os.path.expanduser('~')
hostname = socket.gethostname().split('.')[0]
autosave = 30

# Make sure we are in session
ipython = get_ipython() # save session
if ipython is None:
    print("Warning: IPython kernel not found. This script must be run interactively with %run magic.")
    exit()

# Close figures if they exist
# if mpl.pyplot.get_fignums():
#     print("Closing existing figures.")
#     mpl.pyplot.close()

# Without redirection
if len(sys.argv)>1 and sys.argv[-1] not in cd:
    print(f'Moving to directory {sys.argv[-1].replace("~", os.environ["HOME"])}.')
    os.chdir(sys.argv[-1].replace("~", os.environ["HOME"])) # move to this directory

# Declare new magic command
# See: https://gist.github.com/gauteh/2f8f49f082f1d09b3db0
_custom_paths = []
# def find_in_syspath(filename):
#   return filefind(filename, sys.path)
def find_in_pythonpath(filename):
  global _custom_paths
  try:
    path_dirs = ['.'] + _custom_paths + os.environ['PYTHONPATH'].split(':')
  except:
    path_dirs = ['.'] + _custom_paths
  return filefind(filename, path_dirs)
@register_line_magic
def so(line):
  ip = get_ipython()
  ip.magics_manager.magics['line']['run'](line, file_finder=find_in_pythonpath)
del so # only needed for registration
@register_line_magic
def addpath(line):
  global _custom_paths
  _custom_paths.append(line)
del addpath
print('Added custom magic commands.')

# Run magic commands
# Reloading modules, so can easily edit/run imported functions
if 'autoreload' not in ipython.magics_manager.magics['line']:
    # Only do this if not already loaded -- otherwise will get *recursive* 
    # reloading, even with unload_ext command!
    ipython.magic("reload_ext autoreload") # reload instead of load, to avoid annoying message
    ipython.magic("autoreload 2") # turn on expensive autoreloading
    print("Enabled autoreload.")
# Autosaving
_ = io.StringIO() # message has a bunch of unnecessary newlines; will modify it
with redirect_stdout(_):
    ipython.magic(f"autosave {autosave:d}") # autosave every minute
print(f"Autosaving every {autosave:d} seconds.")
# Plotting stuff
# Initialize with default 'inline' settings; then modify them
# with the various config options; that was probably my problem before
ipython.magic("matplotlib inline") # change print_figure_kwargs to see edges
# So don't have memory issues/have to keep re-closing them
ipython.magic("config InlineBackend.close_figures = True")
# Retina probably more space efficient (high-res bitmap), but svg is prettiest
# and is only one preserving vector graphics
ipython.magic("config InlineBackend.figure_formats = ['retina']")
# ipython.magic("config InlineBackend.figure_formats = ['retina','svg']")
# By default several rcParams are reset when printing to cell output; for
# retina (which is hi-res bitmap) we just want to set the DPI to something reasonable
ipython.magic("config InlineBackend.rc = {}")
# Optionally keep figures tight around edges
# TODO: Can this also be set with an .rc setting?
ipython.magic("config InlineBackend.print_figure_kwargs = {'bbox_inches':None}") #bbox_inches=\'tight\', pad_inches=0.1)')
print("Configured inline plotting.")
