#!/usr/bin/env python3
"""
Script to set up magic commands and other notebook properties.
Just call this in the first cell with "run pyfuncs/notebook". And voila!
Call with optional directory argument to make that the new working directory.
Function suppresses output by default: see https://stackoverflow.com/a/40984270/4970632

Some notes on jupyter configuration:
    * in .jupyter, the jupyter_nbconvert_config.json sets up locations of stuff; templates
        for nbextensions and formatting files for markdown/code cells.
    * in .jupyter, the jupyter_notebook_config.json installs the configurator extension
        for managing extra plugins.
    * in .jupyter, not sure yet how to successfully use jupyter_console_config.py and
        jupyter_notebook_config.py; couldn't get it to do what this function does on startup.
    * in .jupyter/custom, current_theme.txt lists the current jupyterthemes theme, custom.css
        contains CSS formatting for it, and fonts should contain font files -- note that there
        are not font files on my Mac, even though jupyterthemes works; sometimes may be empty
    * in .jupyter/nbconfig, tree.json loads the extra tab for the NBconfigurator, and 
        common.json gives option to hide incompatible plugs, and notebook.json contains all
        the new settings; just copy it over to current notebook to update

"""
from IPython import get_ipython
from contextlib import redirect_stdout
import io
import os
import sys
import socket
cd = os.getcwd()
home = os.path.expanduser('~')
hostname = socket.gethostname().split('.')[0]
# Without redirection
if len(sys.argv)>1:
    os.chdir(sys.argv[-1].replace("~", os.environ["HOME"])) # move to this directory
    print(f'Moved to directory {sys.argv[-1].replace("~", os.environ["HOME"])}.')
if get_ipython() is not None:
    # Basic configuration
    # ipy.core.display.display(ipy.core.display.HTML(html_format))
    get_ipython().magic("reload_ext autoreload") # reload instead of load, to avoid annoying message
    get_ipython().magic("autoreload 2") # turn on expensive autoreloading
    # Notebook configuration
    get_ipython().magic("autosave 60") # autosave every 120 seconds
    get_ipython().magic("config InlineBackend.close_figures = True")
        # so don't have memory issues/have to keep re-closing them
    get_ipython().magic("config InlineBackend.figure_formats = ['retina','svg']")
        # retina probably more space efficient (high-res bitmap), but svg is prettiest
        # and is only one preserving vector graphics
    get_ipython().magic("config InlineBackend.rc = {'figure.dpi':70, 'savefig.dpi':70}") # 80 or 100 is apporpriate
        # by default several rcParams are reset when printing to cell output; for
        # retina (which is hi-res bitmap) we just want to set the DPI to something reasonable
    get_ipython().magic("config InlineBackend.print_figure_kwargs = {'bbox_inches':None}") #bbox_inches=\'tight\', pad_inches=0.1)')
        # optionally keep figures tight around edges
    get_ipython().magic("matplotlib inline") # change print_figure_kwargs to  see edges
print("Notebook is configured.")
# Re-directing stdout
# _ = io.StringIO()
# with redirect_stdout(_):
#     if len(sys.argv)>1:
#         os.chdir(sys.argv[-1].replace("~", os.environ["HOME"])) # move to this directory
#         print(f'Moved to directory {sys.argv[-1].replace("~", os.environ["HOME"])}.')
#     if get_ipython() is not None:
#         # Basic configuration
#         # ipy.core.display.display(ipy.core.display.HTML(html_format))
#         get_ipython().magic("reload_ext autoreload") # reload instead of load, to avoid annoying message
#         get_ipython().magic("autoreload 2") # turn on expensive autoreloading
#         # Notebook configuration
#         get_ipython().magic("autosave 60") # autosave every 120 seconds
#         get_ipython().magic("config InlineBackend.close_figures = True")
#             # so don't have memory issues/have to keep re-closing them
#         get_ipython().magic("config InlineBackend.figure_formats = ['retina']")
#             # retina probably more space efficient (high-res bitmap), but svg is prettiest
#             # and is only one preserving vector graphics
#         get_ipython().magic("config InlineBackend.rc = {'figure.dpi':70, 'savefig.dpi':70}") # 80 or 100 is apporpriate
#             # by default several rcParams are reset when printing to cell output; for
#             # retina (which is hi-res bitmap) we just want to set the DPI to something reasonable
#         get_ipython().magic("config InlineBackend.print_figure_kwargs = {'bbox_inches':None}") #bbox_inches=\'tight\', pad_inches=0.1)')
#             # optionally keep figures tight around edges
#         get_ipython().magic("matplotlib inline") # change print_figure_kwargs to  see edges
# _ = _.getvalue().split('\n')
# if _[0].startswith("Moved to directory"):
#     print(_[0].strip()) # and strip any whitespace
# print("Notebook is configured.")
