#------------------------------------------------------------------------------
# Good inspiration here http://www.deanbodenham.com/learn/tmux-conf-file.html
# Also here: https://gist.github.com/spicycode/1229612
# Also here: https://github.com/tony/tmux-config/blob/master/.tmux.conf
#------------------------------------------------------------------------------
# Unbind tab
unbind Tab

# Change prefix to 'x' for tmuX
set -g prefix C-x

# Scroll command-to-command
# See: https://unix.stackexchange.com/a/353415/112647
# bind b send-keys -X search-backward "^.*[?]:"
# bind b copy-mode\; send-keys -X start-of-line\; send-keys -X search-backward "^.*[?]:"

# 0 is too far from ` ;)
set -g base-index 1
set -g pane-base-index 1

# General behavior options
# set-window-option -g automatic-rename on
bind d detach  # intuitive mapping
unbind t  # shows time but this was not useful
set -g set-titles off  # do not broadcast title to terminal
set -g allow-rename off  # do not automatically rename windows
set -g history-limit 5000  # huge history
set -g aggressive-resize off  # iterm issues: https://github.com/tmux-plugins/tmux-sensible/issues/24
set -g update-environment "DISPLAY SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY"

# Vim and copy mode options
# Note this does not include some basic VIM features, like v selection; add those manually
# See: https://sanctum.geek.nz/arabesque/vi-mode-in-tmux/
# For if-shell see upvoted answer: https://stackoverflow.com/questions/35016458/how-to-write-if-statement-in-tmux-conf-to-set-different-options-for-different-t/36414566
# and note first line runs for 'true' condition, second line 'false' condition
set -g status-keys vi  # set up vim "normal mode" in status-line
set -g mode-keys vi  # set up vim "normal mode" in selections
bind p paste  # paste copied contents
bind i copy  # enter copy mode similar to vim insert mode
unbind I  # so don't hit by accident
unbind [  # now used for resizing
unbind ]  # now used for resizing

# Maps specific to VI 'key-table'
# Note that chaining commands for a key table is not possible in versions < 2.4, so
# use workaround: https://github.com/tmux/tmux/issues/215
# Normally rectangle-toggle only works if you trigger vi-mode, then press <Space>, but
# this puts it in one keypress
if '[ "$(echo "$(tmux -V | cut -d" " -f2) < 2.4" | bc)" = 1 ]' \
  'bind ? list-keys -t vi-copy; \
   unbind -t vi-copy v; \
   bind -t vi-copy C-v rectangle-toggle; \
   bind -t vi-copy r rectangle-toggle; \
   bind -t vi-copy v begin-selection; \
   bind -t vi-copy y copy-selection; \
   bind -t vi-copy Escape cancel; \
   bind -t vi-copy Enter cancel' \
  'bind ? list-keys -T copy-mode-vi; \
   bind -T copy-mode-vi C-v send -X begin-selection \; send -X rectangle-toggle; \
   bind -T copy-mode-vi v send -X begin-selection; \
   bind -T copy-mode-vi y send -X copy-selection-and-cancel; \
   bind -T copy-mode-vi Escape send -X cancel'

# Display information (for now, options and remaps)
# Print information (never remember these keys; alway shave to search in the tmux file)
bind o show-options -g
bind O show-window-options -g
bind / list-keys

# Version-specific commands (grumble, grumble)
# See: https://github.com/tmux/tmux/blob/master/CHANGES
# Copied from: https://stackoverflow.com/a/40902312/4970632
# Idea for tmux version variable: run-shell "tmux setenv -g TMUX_VERSION $(tmux -V | cut -c 6-)"
# UTF8 is autodetected in 2.2 onwards, but errors if explicitly set.
if '[ "$(echo "$(tmux -V | cut -d" " -f2) < 2.2" | bc)" = 1 ]' \
  'set -g utf8 on; \
    set -g status-utf8 on; \
    set -g mouse-utf8 on'
# Turning on mouse in 2.1 onwards is set -g mouse on, but older is more complex.
if '[ "$(echo "$(tmux -V | cut -d" " -f2) < 2.1" | bc)" = 1 ]' \
  'set -g mouse-select-pane on; \
   set -g mouse-resize-pane on; \
   set -g mouse-select-window on' \
  'set -g mouse on'

# Pane selection and manipulation
# Normally don't have to provide full path, but re-attaching to old sessions, sometimes
# tmux PATH variable persistently points to $HOME instead of $HOME/bin
set -g display-panes-time 200
set -g display-panes-colour white
set -g display-panes-active-colour yellow
bind s display-pane \; command -p "Select pane:" "select-pane -t %1"  # s for select
bind w display-pane \; command -p "Send pane to position:"  "run '$HOME/bin/tmux-paneswap %1'"  # little w for sWap
bind W command -p "Send pane to window:" "run '$HOME/bin/tmux-panesend %1'"  # big w for sending to window
bind * next-layout # star should be though of as "scrambling" the panes
unbind Space # disable default remap for this

# Window moving and manipulation
bind c command -p "Created window title:" "new-window -n '%%'"
bind t command -p "Change window title:" "rename-window '%%'"
bind m command -p "Send window to:"  "run 'tmux-windowswap %1'"
unbind M  # no swapping command bindings
bind > run -b 'tmux-windowswap #I+1'
bind < run -b 'tmux-windowswap #I-1'

# Window selection and swapping
bind "'" last-window
bind . next-window
bind , previous-window # everything here is same as VIM conventions

# Helper function; try with e.g. #I and #P
bind D command -p "Tmux display command (will expand special arguments):" "display -p '%%'" # print stuff

# Selecting
bind \; select-pane -l # here -l means the last pane; use this to bounce between them
bind h select-pane -L
bind l select-pane -R
bind k select-pane -U
bind j select-pane -D

# Resizing
# These are different from VIM bindings -/=/_/+ but this comamnd is also
# conceptually different -- we move border in direction instead of blindly increasing size
bind = resize-pane -x 80
bind ( resize-pane -U 2 # matches j/k keys; j is down, k is up
bind ) resize-pane -D 2 # 9 and 0 are on parentheses; so parentheses are up/down
bind _ resize-pane -U 5
bind + resize-pane -D 5

# Want to resize horizontally more drastically than vertically, usually
bind [ resize-pane -L 10
bind ] resize-pane -R 10 # and brackets are left/right
bind { resize-pane -L 20
bind } resize-pane -R 20 # and brackets are left/right

# Splitting
bind \ split-window -h
bind - split-window -v

# Failed attempts for moving window
# bind w display-pane \; command -p "Send pane to:"  "display -p \"swap-pane -s:#I.#P -t:#I.%1\""
# bind w display-pane \; command -p "Send pane to:"  "swap-pane -s:#I.#P -t:#I.%1"
# bind w display-pane \; command -p "Send pane to:"  "swap-pane -s:#P -t:%1"

# Quitting stuff and managing session
bind e respawn-pane  # anlagous to vim :edit mapping
bind r clear-history  # clear scrollback history
bind R source-file ~/.tmux.conf  # analagous to vim :Refresh mapping
bind x confirm kill-pane  # equivalent to vim <C-w> mapping
bind q confirm kill-window  # equivalent to vim <C-e> mapping
bind Q confirm kill-server  # eqvuialent to vim <C-q> mapping

# Stop making windows white when process completes; the colors below failed, and
# only thing that worked was to totally turn off monitor activity
set -g monitor-activity on  # this one necessary
set -g visual-activity off  # causes flash of title bar
set -g window-status-activity-attr none  # default is reverse which swaps bg/fg colors
set -g window-status-activity-bg black  # bell same as normal/standard background
set -g window-status-activity-fg white  # bell same as normal/standard foreground

# Window settings and themes
# Bell is flash of whole screen; annoying, so turn off
set -g visual-bell off
set -g remain-on-exit  # don't close pane when process running it exits
set -g display-time 1000  # display message time
set -g status-bg black
set -g status-fg white
set -g window-status-current-bg green
set -g window-status-current-fg black
set -g window-status-current-attr bold
set -g status-interval 60
set -g status-left-length 30
set -g status-left '#[fg=green](#S) #(whoami)'
set -g status-right '#[fg=yellow]#(cut -d " " -f 1-3 /proc/loadavg)#[default] #[fg=white]%H:%M#[default]'

# Plugin management
# See https://github.com/tmux-plugins/tpm
# Install TPM for first time: git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
# First list the plugin, then run plugin manager; enforce version 1.9 or greater
if '[ "$(echo "$(tmux -V | cut -d" " -f2) >= 1.9" | bc)" = 1 ]' \
  'set -g @plugin "tmux-plugins/tpm"; \
    set -g @plugin "tmux-plugins/tmux-sensible"; \
    set -g @plugin "tmux-plugins/tmux-resurrect"; \
    run "~/.tmux/plugins/tpm/tpm"; \
    bind I run "~/.tmux/plugins/tpm/bindings/install_plugins"; \
    bind U run "~/.tmux/plugins/tpm/bindings/update_plugins"; \
    bind C run "~/.tmux/plugins/tpm/bindings/clean_plugins"' \
  'display-message "TMUX too old for plugin manager."'
