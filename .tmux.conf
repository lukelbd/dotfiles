# .tmux.conf
# This file sets some default tmux options.
#------------------------------------------------------------------------------
# Good inspiration here http://www.deanbodenham.com/learn/tmux-conf-file.html
# Also here https://gist.github.com/spicycode/1229612
#------------------------------------------------------------------------------
# Unbind tab
unbind Tab
# Change default prefix
set -g prefix C-b
# Scroll command-to-command
# See: https://unix.stackexchange.com/a/353415/112647
# bind b send-keys -X search-backward "^.*[?]:"
# bind b copy-mode\; send-keys -X start-of-line\; send-keys -X search-backward "^.*[?]:"

# 0 is too far from ` ;)
set -g base-index 1
set -g pane-base-index 1

# Behavior options
# set-window-option -g automatic-rename on
set -g set-titles off # window title looks ugly in iTerm2 tabs, so turn off
set -g history-limit 10000 # not sure what this does
set -g monitor-activity on
set -g aggressive-resize on
set -sg escape-time 0
unbind t # shows time; this was dumb

# VI and copy mode options
# Note this does not include some basic VIM features, like v selection; add those manually
# See this page: https://sanctum.geek.nz/arabesque/vi-mode-in-tmux/
# For if-shell see my upvoted answer here: https://stackoverflow.com/questions/35016458/how-to-write-if-statement-in-tmux-conf-to-set-different-options-for-different-t/36414566
# and note first line runs for 'true' condition, second line 'false' condition
set -g status-keys vi # sets up optional "normal mode" in status-line (i.e. <C-b>:), gives it normal/insert mode
set -g mode-keys vi # sets up VIM movements in select/copy mode, so much easier to copy
bind -t vi-edit C-d delete-line # delete line while in vi-edit mode; useful for searches
bind p paste
# bind P paste # paste copied text
bind i copy # enter copy mode; mnemonic is just like VIM insert mode
unbind [
unbind ] # so make a habit of new method

# Display information (for now, options and remaps)
bind o show-options -g
bind ? list-keys
if '[ "$(echo "$(tmux -V | cut -d" " -f2) < 2.4" | bc)" = 1 ]' \
  'bind / list-keys -t vi-copy; bind -t vi-copy v begin-selection; bind -t vi-copy y copy-selection; bind -t vi-copy Escape cancel' \
  'bind / list-keys -T copy-mode-vi; bind -T copy-mode-vi v send -X begin-selection; bind -T copy-mode-vi y send -X copy-selection-and-cancel; bind -T copy-mode-vi Escape send -X cancel'
  # set visual/yank remaps, also command for echoing binding information and exiting copy-mode with Escape key
  # note important bindings '/' and '?' for searching, 'q' to exit copy mode

# Version-specific commands [grumble, grumble]
# See: https://github.com/tmux/tmux/blob/master/CHANGES
# Idea for tmux version variable: run-shell "tmux setenv -g TMUX_VERSION $(tmux -V | cut -c 6-)"
# Copied from: https://stackoverflow.com/a/40902312/4970632

# Turn on mouse, but check version first
# Newer version uses set -g mouse on, but older is more complex
# * The if-shell -b flag runs shell command in background
# * Turn off 'mode-mouse' if possible; causes weird behavior when
#   using mouse in VIM, might accidentally enter copy-mode
if '[ "$(echo "$(tmux -V | cut -d" " -f2) < 2.1" | bc)" = 1 ]' \
  'set -g mouse-select-pane on; set -g mouse-resize-pane on; set -g mouse-select-window on' \
  'set -g mouse on' # in version 2.1 'mouse' replaced previous 4 options
# UTF8 is autodetected in 2.2 onwards, but errors if explicitly set
if '[ "$(echo "$(tmux -V | cut -d" " -f2) < 2.2" | bc)" = 1 ]' \
  'set -g utf8 on; set -g status-utf8 on; set -g mouse-utf8 on'

# Window selection and manipulation
# Moving
# Weird issues with the pane_current_path versions; would start tab in root '/'
# bind \ split-window -h -c '#{pane_current_path}' # l == to the right
# bind - split-window -v -c '#{pane_current_path}' # j == below
# bind n choose-window "move-window -t "%%""
bind M swap-window -t -1
bind m swap-window -t +1 # switch windows left-right
# bind < command -p index "run 'num=$(tmux display -p '#!')'; "
# Selecting
bind \; last-window
bind . next-window
bind , previous-window # everything here is same as VIM conventions

# Pane selection and manipulation
# Moving
# set -g display-panes-time 999999
set -g display-panes-time 1000
set -g display-panes-colour white
set -g display-panes-active-colour yellow
bind n display-pane
bind j command -p "Join pane from (window #I):"  "swap-pane -t '#I.%%'"
bind s command -p "Send pane to (window #I):"  "display -p \"swap-pane -s:#I.#P -t:#I.%%\""
bind s command -p "Send pane to (window #I):"  "swap-pane -s:#I.#P -t:#I.%1"
  # apparently the # is never expanded; read as a comment if unquoted, or read as a literal
  # '#' character if quoted; but expansion *does work* in "display -p \"stuff\"" context
bind P command -p "Print:" "display -p '%%'"
  # to help me diagnose issues
# Selecting
bind "'" select-pane -l # here -l means the last pane; use this to bounce between them
bind h select-pane -L
bind l select-pane -R
bind k select-pane -U
bind j select-pane -D
# Resizing
bind Down resize-pane -D 5
bind Up resize-pane -U 5
bind Left resize-pane -L 5
bind Right resize-pane -R 5
# Splitting
bind \ split-window -h # l == to the right
bind - split-window -v # j == below
bind | split-window -h # l == to the right
bind _ split-window -v # j == below
  # same as iterm conventions

# Quitting stuff and managing session
bind q confirm kill-window
bind Q confirm kill-server
bind x confirm kill-pane
  # same as iterm convention
bind r source-file ~/.tmux.conf
  # reload tmux config
bind R respawn-pane
  # respawn dead pane, and don't close pane if process dies; if pane still alive this does nothing

# Theme/window status attributes
set -g remain-on-exit # don't close pane when process running it exits
set -g display-time 1000 # display message time
set -g status-bg black
set -g status-fg white
set -g window-status-current-bg white
set -g window-status-current-fg black
set -g window-status-current-attr bold
set -g status-interval 60
set -g status-left-length 30
set -g status-left '#[fg=green](#S) #(whoami)'
set -g status-right '#[fg=yellow]#(cut -d " " -f 1-3 /proc/loadavg)#[default] #[fg=white]%H:%M#[default]'

# Plugin management; see https://github.com/tmux-plugins/tpm
# To install TPM for first time, run: git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm
# First list the plugin, then run plugin manager; enforce version 1.9 or greater
if '[ "$(echo "$(tmux -V | cut -d" " -f2) >= 1.9" | bc)" = 1 ]' \
  'set -g @plugin "tmux-plugins/tpm"; set -g @plugin "tmux-plugins/tmux-sensible"; set -g @plugin "tmux-plugins/tmux-resurrect"; run "~/.tmux/plugins/tpm/tpm"; bind I run "~/.tmux/plugins/tpm/bindings/install_plugins"; bind U run "~/.tmux/plugins/tpm/bindings/update_plugins"; bind C run "~/.tmux/plugins/tpm/bindings/clean_plugins"' \
  'display-message "TMUX too old for plugin manager."'

# iTerm has issues with this option; see thread https://github.com/tmux-plugins/tmux-sensible/issues/24
set -g aggressive-resize off

#------------------------------------------------------------------------------
# Alternate version
# From https://github.com/tony/tmux-config/blob/master/.tmux.conf
#------------------------------------------------------------------------------
# # Default window title colors
# # set-window-option -g window-status-fg colour244 #base0
# # set-window-option -g window-status-bg default
# #set-window-option -g window-status-attr dim
#
# # Active window title colors
# # set-window-option -g window-status-current-fg colour166 #orange
# # set-window-option -g window-status-current-bg default
# #set-window-option -g window-status-current-attr bright
#
# # Pane border
# # set-option -g pane-border-fg colour235 #base02
# # set-option -g pane-active-border-fg colour240 #base01
#
# # Message text
# # set-option -g message-bg colour235 #base02
# # set-option -g message-fg colour166 #orange
#
# # Pane number display
# # set-option -g display-panes-active-colour colour33 #blue
# # set-option -g display-panes-colour colour166 #orange
#
# # Clock
# # set-window-option -g clock-mode-colour green #green
#
# # Color
# # set -g default-terminal "screen-256color"
#
# # Set window split
# bind v split-window -h
# bind b split-window
#   # v for vertical, b for below
#
# # Other stuff
# set -g status-interval 1
# set -g status-justify centre # center align window list
# set -g status-left-length 20
# set -g status-right-length 140
# set -g status-left '#[fg=green]#H #[fg=black]â€¢ #[fg=green,bright]#(uname -r | cut -c 1-6)#[default]'
# set -g status-right '#[fg=green,bg=default,bright]#(tmux-mem-cpu-load) #[fg=red,dim,bg=default]#(uptime | cut -f 4-5 -d " " | cut -f 1 -d ",") #[fg=white,bg=default]%a%l:%M:%S %p#[default] #[fg=blue]%Y-%m-%d'
#
# # C-b is not acceptable -- Vim uses it
# # set-option -g prefix C-a
# # bind C-a last-window
#   # use C-b actually, because i have C-a remapped in Vim but never really
#   # use full-page scrolling with C-b/C-f
#
# # Start numbering at 1
# set -g base-index 1
#
# # Allows for faster key repetition
# set -s escape-time 0
#
# # Rather than constraining window size to the maximum size of any client
# # connected to the *session*, constrain window size to the maximum size of any
# # client connected to *that window*. Much more reasonable.
# setw -g aggressive-resize on
#
# # Allows us to use C-a a <command> to send commands to a TMUX session inside
# # another TMUX session
# bind a send-prefix
#
# # Activity monitoring
# setw -g monitor-activity on
# set -g visual-activity on
#
# # hjkl pane traversal
# bind h select-pane -L
# bind j select-pane -D
# bind k select-pane -U
# bind l select-pane -R
#
# # Set to main-horizontal, 60% height for main pane
# bind m set-window-option main-pane-height 60\; select-layout main-horizontal
#
# # Create new window, with new name, using C
# bind C command-prompt -p "Name of new window: " "new-window -n '%%'"
#
# # Reload config
# bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."
#
# # Auto window rename
# set-window-option -g automatic-rename
#
# # https://github.com/edkolev/dots/blob/master/tmux.conf
# # Updates for tmux 1.9's current pane splitting paths.
#
# # From powerline
# run-shell "tmux set-environment -g TMUX_VERSION_MAJOR $(tmux -V | cut -d' ' -f2 | cut -d'.' -f1 | sed 's/[^0-9]*//g')"
# run-shell "tmux set-environment -g TMUX_VERSION_MINOR $(tmux -V | cut -d' ' -f2 | cut -d'.' -f2 | sed 's/[^0-9]*//g')"
#
# # Status bar
# if-shell '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -lt 2\) -o #{$TMUX_VERSION_MAJOR} -le 1' 'set-option -g status-utf8 on'
#
# # Vi copypaste mode
# # set-window-option -g mode-keys vi
# # if-shell "test '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -ge 4 \)'" 'bind -Tcopy-mode-vi v send -X begin-selection; bind -Tcopy-mode-vi y send -X copy-selection-and-cancel'
# # if-shell '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -lt 4\) -o #{$TMUX_VERSION_MAJOR} -le 1' 'bind -t vi-copy v begin-selection; bind -t vi-copy y copy-selection'
#   # not sure what this does, but don't think necessary; shouldn't vim pastemode work?
#
# # Rm mouse mode fail
# if-shell '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -ge 1\)' 'set -g mouse off'
# if-shell '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -lt 1\) -o #{$TMUX_VERSION_MAJOR} -le 1' 'set -g mode-mouse off'
#
# # Fix pane_current_path on new window and splits
# if-shell "test '#{$TMUX_VERSION_MAJOR} -gt 1 -o \( #{$TMUX_VERSION_MAJOR} -eq 1 -a #{$TMUX_VERSION_MINOR} -ge 8 \)'" 'unbind c; bind c new-window -c "#{pane_current_path}"'
# if-shell "test '#{$TMUX_VERSION_MAJOR} -gt 1 -o \( #{$TMUX_VERSION_MAJOR} -eq 1 -a #{$TMUX_VERSION_MINOR} -ge 8 \)'" "unbind '\"'; bind '\"' split-window -v -c '#{pane_current_path}'"
# if-shell "test '#{$TMUX_VERSION_MAJOR} -gt 1 -o \( #{$TMUX_VERSION_MAJOR} -eq 1 -a #{$TMUX_VERSION_MINOR} -ge 8 \)'" 'unbind v; bind v split-window -h -c "#{pane_current_path}"'
# if-shell "test '#{$TMUX_VERSION_MAJOR} -gt 1 -o \( #{$TMUX_VERSION_MAJOR} -eq 1 -a #{$TMUX_VERSION_MINOR} -ge 8 \)'" 'unbind %; bind % split-window -h -c "#{pane_current_path}"'
