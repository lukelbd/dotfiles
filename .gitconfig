#------------------------------------------------------------------------------
# Configuration file. Note color.ui = always required for piping output
# to other commands e.g. parsing git-status output. For syntax help see:
# https://stackoverflow.com/a/16136745/4970632
# https://stackoverflow.com/q/2421011/4970632
#------------------------------------------------------------------------------
# NEW COMMANDS
# 'amend':
#   Change the name of arbitrary commit messages. Just provide a SHA1 reference
#   See: https://blog.filippo.io/git-fixup-amending-an-older-commit/
# 'amputate':
#   Use this to amputate history at given SHA
# 'base':
#   Show the base directory.
# 'blame':
#   Add nice highlightRecent coloring according to date of commit.
#   See: https://gist.github.com/BuonOmo/ce45b51d0cefe949fd0c536a4a60f000
# 'branches':
#   List all branches. Prune dead remote branches every time.
# 'commands':
#   List of valid commands, used for FZF integration
# 'commits':
#   List all commits including abandoned ones overwritten by e.g. amend
# 'deleted':
#   Lists files that were deleted in git history, but were never re-created
#   or added back in
# 'delta':
#   Show difference between two possibly-renamed files.
# 'dictator':
#   Change user/email information to self through every commit in repository
# 'exec':
#   Exec arbitrary shell command on top level
# 'get':
#   Fetch all branches, even ones that don't yet exist on local
#   local (normally those are ignored with git fetch --all).
#   See: https://stackoverflow.com/a/10312587/4970632
# 'head':
#   Show current head branch
# 'ignore':
#   Stop tracking every single regex pattern in your .gitignore
#   to ignore all subdirectories in another directory, use subdir/*/
# 'ls':
#   List the tracked file names only.
# 'll':
#   List the tracked file names and commits.
# 'master':
#   Merge master branch into current branch.
# 'main':
#   Merge main branch into current branch.
# 'objects':
#   When you commit giant files (i.e. over 100MB), even after you delete them,
#   you won't be able to push to Github because they were tracked and are found
#   in .vim. use this to delete file/directory throughout history.
#   See: https://stackoverflow.com/a/23657759/4970632
# 'oops':
#   Amend commit with same commit message by default.
#   See: https://stackoverflow.com/a/56267398/4970632
# 'outdated':
#   Remove outdated references to remote branches.
# 'pack':
#   Show largest 'pack' files in repo
# 'pop':
#   Shortcut for 'git stash pop'
# 'publish':
#   Push the tags to origin.
# 'refs':
#   Show all references (useful for undoing things)
#   See: https://stackoverflow.com/a/21778/4970632
# 'remotes':
#   Show remote branches.
# 'remove':
#   For more information see the script, can be passed a filename or a
#   regular expression e.g. '*.mov'
# 'save':
#   Shortcut for 'git stash push'
# 'saved':
#   Show stash N stats relative to its parent (stash positive).
# 'search':
#   Search entire histry for given regex.
#   See: https://stackoverflow.com/a/2929502/4970632
# 'summary':
#   Show stylized most recent git stash
# 'staged':
#   Show staged difference stats.
# 'stashed':
#   Show stash N stats relative to HEAD (stash positive).
# 'stashes':
#   List all git stashes.
# 'stream':
#   Checkout master and pull upstream branch.
# 'tags':
#   List all git tags.
# 'tree':
#   Git log including changes
# 'trunk':
#   Git log excluding changes
# 'unset':
#   Unset upstream branch. Needed after you change the name of a local branch
#   with git branch -m name because git tracks the old remote branch name
# 'upstream':
#   Set upstream branch. Same as 'git branch -u'.
# 'unstaged':
#   Show unstaged difference stats.
# 'vim':
#   List the vim processes running inside directory
# 'wtf':
#   Queries the remote server to test whether we are synced
#   also prints current branch and remote branch, with extra info
#------------------------------------------------------------------------------;
# TODO
# 'opts':
#   Fails not just as git alias, but when calling the regex manually.
#   See: https://stackoverflow.com/a/52846422/4970632
# "!f(){ echo ${1}; echo /usr/local/share/doc/git-doc/git-${1}.txt; cat /usr/local/share/doc/git-doc/git-${1}.txt | ggrep --initial-tab --recursive \
#   --binary-files=without-match --no-filename --only-matching --perl-regexp \
#   --null-data --regexp='(?ms)(?:^[a-z][a-zA-Z]+\\.[<>()*.a-zA-Z]+::\\v+)+?(?:(?:\\v|\\h+\\V+\\v))+(?:\\v|\\Z)'; }; f"
#------------------------------------------------------------------------------;
[alias]
	amend    = "!f() { TARGET=$(git rev-parse \"$1\"); git commit --fixup=$TARGET ${@:2} && EDITOR=true git rebase -i --autostash --autosquash $TARGET^; }; f"
	amputate = "!git-amputate \"$@\""
	base     = rev-parse --show-toplevel
	branches = branch -vv --all
	commands = "!git help -a | grep \"^ \\+[a-z]\" | tr -s ' ' | cut -d' ' -f2"
	commits  = "!git log --graph --abbrev-commit --date=relative --branches --oneline --decorate --color $(git rev-list -g --all) 2>/dev/null"
	deleted  = "!git-deleted \"$@\""
	dictator = "!git-dictator \"$@\""
	exec     = "!exec \"$@\""
	get      = "!git-get \"$@\""
	head     = "!git rev-parse --abbrev-ref HEAD 2>/dev/null"
	ignore   = "!git-ignore \"$@\""
	ls       = ls-tree -r HEAD --name-only :/
	ll       = ls-tree -r HEAD --abbrev :/
	master   = "!git fetch --all && git stash push && {git merge master; git stash pop; }"
	merged   = "![ $(git merge-base HEAD master) == $(git rev-parse HEAD) ] && echo \"Master is up to date with current branch.\" || \"Master is not up to date with current branch.\""
	objects  = "!git count-objects -H -v"
	outdated = remote prune origin
	oops     = "!f(){ if [ \"$#\" -eq 0 ]; then git commit --amend --no-edit; else git commit --amend \"$@\"; fi; }; f"
	pack     = "!git-pack \"$@\""
	pop      = stash pop
	publish  = push origin --tags
	refs     = reflog show --all
	remotes  = remote --verbose
	remove   = "!git-remove \"$@\""
	save     = stash push
	saved    = "!f() { git diff stash@{${1:-0}}^ stash@{${1:-0}} --stat=80 2>/dev/null; }; f"
	search   = "!f() { git grep \"$@\" $(git rev-list --all --abbrev-commit); }; f"
	summary  = "!git stashes | head -1 | sed 's/^/## /' && git stash show --name-status 2>/dev/null"
	staged   = diff --stat=80 --staged
	stashed  = "!f() { git diff HEAD stash@{${1:-0}} --stat=80 2>/dev/null; }; f"
	stashes  = stash list
	stored   = "!f() { git diff stash@{${1:-0}}^ stash@{${1:-0}} 2>/dev/null; }; f"
	stowed   = "!f() { git diff HEAD stash@{${1:-0}} 2>/dev/null; }; f"
	stream   = "!git checkout master && pull upstream master"
	tags     = tag --list
	top      = rev-parse --show-toplevel
	tree     = log --graph --abbrev-commit --date=relative --branches --stat --decorate --color
	trunk    = log --graph --abbrev-commit --date=relative --branches --name-status --oneline --decorate --color
	unset    = branch --unset-upstream
	unstaged = diff --stat=80
	upstream = branch --set-upstream-to
	vim      = "!git-vim \"$@\""
	wtf      = "!git-wtf \"$@\""
[blame]
	date = human
	coloring = highlightRecent
[color "blame"]
	highlightRecent = 237, 20 month ago, 238, 19 month ago, 239, 18 month ago, 240, 17 month ago, 241, 16 month ago, 242, 15 month ago, 243, 14 month ago, 244, 13 month ago, 245, 12 month ago, 246, 11 month ago, 247, 10 month ago, 248, 9 month ago, 249, 8 month ago, 250, 7 month ago, 251, 6 month ago, 252, 5 month ago, 253, 4 month ago, 254, 3 month ago, 231, 2 month ago, 230, 1 month ago, 229, 3 weeks ago, 228, 2 weeks ago, 227, 1 week ago, 226
[color]
	ui = always
[core]
	attributesfile = ~/.gitattributes
	excludesfile = ~/.gitignore
	mergeoptions = --no-edit
	ignorecase = false
	editor = command vim
[credential]
	helper = osxkeychain
[diff]
	renames = copies
[diff "pdf"]
	textconv = pdfinfo
[diff "zip"]
	textconv = unzip -v
[diff "ipynb"]
	textconv = nbstripout -t
[filter "nbstripout"]
	clean  = "f() { echo >&2 \"clean: nbstripout $1\"; nbstripout; }; f %f"
	smudge = "f() { echo >&2 \"smudge: cat $1\"; cat; }; f %f"
	required = true
[interactive]
	singleKey = true
[merge]
	conflictstyle = diff3
	tool = vimdiff
[mergetool]
	prompt = false
	keepBackup = false
[pager]
	branch = false
	saved = false
	staged = false
	stash = false
	stashed = false
	status = false
	summary = false
	unstaged = false
	tag = false
[push]
	autoSetupRemote = true
	default = upstream
	followTags = true
[remote]
	verbose = true
[status]
	short = true
	branch = true
[user]
	name = Luke Davis
	email = lukelbd@gmail.com
